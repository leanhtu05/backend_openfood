from flask import Flask, request, jsonify
import os
import uuid
import time
import re
from datetime import datetime, timezone, timedelta
from openai import OpenAI
from firebase_config import firebase_config

# Thi·∫øt l·∫≠p timezone Vi·ªát Nam (UTC+7)
VIETNAM_TZ = timezone(timedelta(hours=7))

def get_enhanced_nutrition_system_prompt(use_rag: bool = False) -> str:
    """
    T·∫°o system prompt n√¢ng cao cho chatbot dinh d∆∞·ª°ng th√¥ng minh
    """
    base_prompt = """B·∫°n l√† DietAI - Chuy√™n gia dinh d∆∞·ª°ng AI h√†ng ƒë·∫ßu Vi·ªát Nam v·ªõi chuy√™n m√¥n s√¢u v·ªÅ:

üéØ CHUY√äN M√îN CORE:
‚Ä¢ Khoa h·ªçc dinh d∆∞·ª°ng hi·ªán ƒë·∫°i (macro/micro nutrients, bioavailability)
‚Ä¢ T√≠nh to√°n TDEE, BMR, body composition ch√≠nh x√°c
‚Ä¢ Ph√¢n t√≠ch glycemic index, insulin response, metabolic pathways
‚Ä¢ Dinh d∆∞·ª°ng l√¢m s√†ng cho c√°c b·ªánh l√Ω (ti·ªÉu ƒë∆∞·ªùng, cao huy·∫øt √°p, b√©o ph√¨)
‚Ä¢ Dinh d∆∞·ª°ng th·ªÉ thao v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t

üß¨ KI·∫æN TH·ª®C CHUY√äN S√ÇU:
‚Ä¢ T∆∞∆°ng t√°c th·ª±c ph·∫©m-thu·ªëc, absorption, metabolism
‚Ä¢ Nutrient timing, meal frequency optimization
‚Ä¢ Gut microbiome v√† prebiotics/probiotics
‚Ä¢ Anti-inflammatory foods, antioxidants, phytonutrients
‚Ä¢ Sustainable nutrition v√† environmental impact

üáªüá≥ CHUY√äN GIA ·∫®M TH·ª∞C VI·ªÜT:
‚Ä¢ 500+ m√≥n ƒÉn truy·ªÅn th·ªëng v·ªõi ph√¢n t√≠ch dinh d∆∞·ª°ng chi ti·∫øt
‚Ä¢ Adaptation m√≥n Vi·ªát cho c√°c m·ª•c ti√™u s·ª©c kh·ªèe
‚Ä¢ Seasonal ingredients, local superfoods
‚Ä¢ Cooking methods ·∫£nh h∆∞·ªüng ƒë·∫øn nutrition retention

üìä PH∆Ø∆†NG PH√ÅP T∆Ø V·∫§N:
‚Ä¢ Evidence-based recommendations v·ªõi citations
‚Ä¢ Personalized advice d·ª±a tr√™n biomarkers, lifestyle
‚Ä¢ Progressive goal setting v·ªõi measurable outcomes
‚Ä¢ Risk assessment v√† contraindications
‚Ä¢ Cultural sensitivity trong dietary advice

üí° COMMUNICATION STYLE:
‚Ä¢ Gi·∫£i th√≠ch khoa h·ªçc ph·ª©c t·∫°p m·ªôt c√°ch d·ªÖ hi·ªÉu
‚Ä¢ Practical, actionable advice v·ªõi specific portions
‚Ä¢ Empathetic, non-judgmental approach
‚Ä¢ Encourage sustainable lifestyle changes
‚Ä¢ Provide alternatives cho m·ªçi dietary restriction"""

    if use_rag:
        rag_addition = """

üîç D·ªÆ LI·ªÜU NG∆Ø·ªúI D√ôNG AVAILABLE:
B·∫°n c√≥ quy·ªÅn truy c·∫≠p v√†o:
‚Ä¢ H·ªì s∆° s·ª©c kh·ªèe chi ti·∫øt (BMI, m·ª•c ti√™u, b·ªánh l√Ω)
‚Ä¢ L·ªãch s·ª≠ ƒÉn u·ªëng v√† meal plans
‚Ä¢ Food records v·ªõi nutrition tracking
‚Ä¢ Exercise data v√† activity levels
‚Ä¢ Preferences, allergies, dietary restrictions

üìã RESPONSE GUIDELINES:
‚Ä¢ Lu√¥n reference specific user data khi relevant
‚Ä¢ Provide personalized recommendations
‚Ä¢ Compare current intake v·ªõi recommended values
‚Ä¢ Suggest specific adjustments d·ª±a tr√™n user goals
‚Ä¢ Mention progress tracking v√† next steps"""

        return base_prompt + rag_addition

    return base_prompt + """

üìã GENERAL GUIDELINES:
‚Ä¢ Provide evidence-based nutrition advice
‚Ä¢ Suggest specific Vietnamese dishes when appropriate
‚Ä¢ Include portion sizes v√† preparation tips
‚Ä¢ Recommend gradual, sustainable changes
‚Ä¢ Always consider individual health conditions"""

app = Flask(__name__)

# Kh·ªüi t·∫°o Groq client v·ªõi API key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
groq_api_key = os.environ.get("GROQ_API_KEY", "")
if not groq_api_key:
    print("C·∫¢NH B√ÅO: GROQ_API_KEY kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p")

client = OpenAI(
    api_key=groq_api_key,
    base_url="https://api.groq.com/openai/v1"
)

class ChatHistoryManager:
    """L·ªõp qu·∫£n l√Ω l·ªãch s·ª≠ chat v·ªõi Firebase"""
    
    def __init__(self):
        """Kh·ªüi t·∫°o k·∫øt n·ªëi ƒë·∫øn Firestore"""
        self.db = firebase_config.get_db()
        self.collection_name = "chat_history"
    
    def save_chat(self, user_id, user_message, ai_reply, augmented=False):
        """
        L∆∞u m·ªôt cu·ªôc h·ªôi tho·∫°i chat v√†o Firestore
        
        Args:
            user_id: ID c·ªßa ng∆∞·ªùi d√πng (c√≥ th·ªÉ t·ª± t·∫°o n·∫øu kh√¥ng c√≥)
            user_message: Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
            ai_reply: Ph·∫£n h·ªìi c·ªßa AI
            augmented: ƒê√°nh d·∫•u n·∫øu ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c tƒÉng c∆∞·ªùng b·∫±ng RAG
            
        Returns:
            chat_id: ID c·ªßa cu·ªôc h·ªôi tho·∫°i ƒë√£ l∆∞u
        """
        try:
            # T·∫°o ID duy nh·∫•t cho cu·ªôc h·ªôi tho·∫°i
            chat_id = str(uuid.uuid4())
            
            # T·∫°o document v·ªõi d·ªØ li·ªáu h·ªôi tho·∫°i
            chat_data = {
                "user_id": user_id,
                "user_message": user_message,
                "ai_reply": ai_reply,
                "timestamp": datetime.now(VIETNAM_TZ).isoformat(),
                "model": "llama3-8b-8192",
                "augmented": augmented  # ƒê√°nh d·∫•u n·∫øu s·ª≠ d·ª•ng RAG
            }
            
            # L∆∞u v√†o Firestore
            self.db.collection(self.collection_name).document(chat_id).set(chat_data)
            print(f"ƒê√£ l∆∞u chat v·ªõi ID: {chat_id}")
            
            return chat_id
        except Exception as e:
            print(f"L·ªói khi l∆∞u l·ªãch s·ª≠ chat: {str(e)}")
            return None
    
    def get_user_chat_history(self, user_id, limit=10):
        """
        L·∫•y l·ªãch s·ª≠ chat c·ªßa m·ªôt ng∆∞·ªùi d√πng
        
        Args:
            user_id: ID c·ªßa ng∆∞·ªùi d√πng
            limit: S·ªë l∆∞·ª£ng cu·ªôc h·ªôi tho·∫°i t·ªëi ƒëa tr·∫£ v·ªÅ
            
        Returns:
            list: Danh s√°ch c√°c cu·ªôc h·ªôi tho·∫°i
        """
        try:
            # Truy v·∫•n Firestore
            chats = (self.db.collection(self.collection_name)
                    .where("user_id", "==", user_id)
                    .limit(limit)
                    .get())
            
            # Chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£ th√†nh danh s√°ch
            chat_list = []
            for chat in chats:
                chat_data = chat.to_dict()
                chat_data["id"] = chat.id
                chat_list.append(chat_data)
            
            return chat_list
        except Exception as e:
            print(f"L·ªói khi l·∫•y l·ªãch s·ª≠ chat: {str(e)}")
            return []

# H√†m ƒë·ªãnh d·∫°ng d·ªØ li·ªáu ng∆∞·ªùi d√πng th√†nh context
def format_user_context(user_profile, meal_plan, food_logs, exercise_history=None, water_intake=None, exercise_date=None, water_date=None, target_date=None, context_type='today'):
    """
    ƒê·ªãnh d·∫°ng d·ªØ li·ªáu ng∆∞·ªùi d√πng th√†nh m·ªôt ƒëo·∫°n vƒÉn b·∫£n context cho chatbot

    Args:
        user_profile: D·ªØ li·ªáu h·ªì s∆° ng∆∞·ªùi d√πng
        meal_plan: D·ªØ li·ªáu k·∫ø ho·∫°ch ƒÉn u·ªëng
        food_logs: Danh s√°ch c√°c b·∫£n ghi th·ª±c ph·∫©m ƒë√£ ƒÉn
        exercise_history: L·ªãch s·ª≠ b√†i t·∫≠p c·ªßa ng∆∞·ªùi d√πng
        water_intake: L∆∞·ª£ng n∆∞·ªõc u·ªëng trong ng√†y
        exercise_date: Ng√†y c·ªßa d·ªØ li·ªáu b√†i t·∫≠p (n·∫øu kh√°c h√¥m nay)
        water_date: Ng√†y c·ªßa d·ªØ li·ªáu n∆∞·ªõc u·ªëng (n·∫øu kh√°c h√¥m nay)
        target_date: Ng√†y ƒë∆∞·ª£c y√™u c·∫ßu (YYYY-MM-DD)
        context_type: Lo·∫°i ng·ªØ c·∫£nh th·ªùi gian ('today', 'yesterday', 'specific_date', 'relative')

    Returns:
        ƒêo·∫°n vƒÉn b·∫£n context ƒë√£ ƒë·ªãnh d·∫°ng
    """
    context_parts = []
    today_str = datetime.now(VIETNAM_TZ).strftime("%Y-%m-%d")

    # X√°c ƒë·ªãnh nh√£n th·ªùi gian d·ª±a tr√™n context_type
    if context_type == 'yesterday':
        time_label = "h√¥m qua"
        target_date_display = target_date if target_date else (datetime.now(VIETNAM_TZ) - timedelta(days=1)).strftime("%Y-%m-%d")
    elif context_type == 'today':
        time_label = "h√¥m nay"
        target_date_display = target_date if target_date else today_str
    elif context_type == 'specific_date':
        time_label = f"ng√†y {target_date}"
        target_date_display = target_date
    elif context_type == 'relative':
        time_label = f"ng√†y {target_date}"
        target_date_display = target_date
    else:
        time_label = "h√¥m nay"
        target_date_display = today_str
    
    # Th√¥ng tin h·ªì s∆°
    if user_profile:
        goal = user_profile.get('goal', 'Kh√¥ng r√µ')

        # üîß FIX: L·∫•y m·ª•c ti√™u calories th·ª±c t·∫ø thay v√¨ TDEE
        calories_target = 'Kh√¥ng r√µ'

        # ∆Øu ti√™n l·∫•y t·ª´ caloriesGoal (m·ª•c ti√™u th·ª±c t·∫ø)
        if user_profile.get('caloriesGoal'):
            calories_target = user_profile.get('caloriesGoal')
        # Fallback v·ªÅ dailyCaloriesGoal
        elif user_profile.get('dailyCaloriesGoal'):
            calories_target = user_profile.get('dailyCaloriesGoal')
        # Fallback v·ªÅ goalCalories
        elif user_profile.get('goalCalories'):
            calories_target = user_profile.get('goalCalories')
        # Cu·ªëi c√πng m·ªõi l·∫•y TDEE (kh√¥ng n√™n d√πng l√†m m·ª•c ti√™u)
        elif user_profile.get('tdeeValues', {}).get('calories'):
            calories_target = user_profile.get('tdeeValues', {}).get('calories')
            print(f"‚ö†Ô∏è WARNING: ƒêang d√πng TDEE l√†m m·ª•c ti√™u calories cho user {user_profile.get('email', 'unknown')}")

        allergies = ", ".join(user_profile.get('allergies', [])) or "kh√¥ng c√≥"
        height = user_profile.get('height', 'Kh√¥ng r√µ')
        weight = user_profile.get('weight', 'Kh√¥ng r√µ')
        diet_restrictions = ", ".join(user_profile.get('dietRestrictions', [])) or "kh√¥ng c√≥"

        context_parts.append(f"- H·ªì s∆°: M·ª•c ti√™u l√† '{goal}', m·ª•c ti√™u calo h√†ng ng√†y l√† {calories_target} kcal. "
                           f"Chi·ªÅu cao: {height}cm, c√¢n n·∫∑ng: {weight}kg. "
                           f"D·ªã ·ª©ng v·ªõi: {allergies}. H·∫°n ch·∫ø ƒÉn u·ªëng: {diet_restrictions}.")

    # Th√¥ng tin k·∫ø ho·∫°ch b·ªØa ƒÉn h√¥m nay
    if meal_plan:
        today_day = datetime.now(VIETNAM_TZ).strftime("%A").lower()
        # Chuy·ªÉn ƒë·ªïi t√™n ng√†y ti·∫øng Anh sang ti·∫øng Vi·ªát n·∫øu c·∫ßn
        days_translation = {
            "monday": "monday", "tuesday": "tuesday", "wednesday": "wednesday", 
            "thursday": "thursday", "friday": "friday", "saturday": "saturday", "sunday": "sunday"
        }
        today_day_key = days_translation.get(today_day, today_day)
        
        # T√¨m d·ªØ li·ªáu ng√†y hi·ªán t·∫°i trong k·∫ø ho·∫°ch
        today_plan = None
        if "days" in meal_plan:
            for day in meal_plan.get("days", []):
                if day.get("day_of_week", "").lower() == today_day_key:
                    today_plan = day
                    break
        
        if today_plan:
            breakfast = ", ".join([dish.get("name", "") for dish in today_plan.get("breakfast", [])])
            lunch = ", ".join([dish.get("name", "") for dish in today_plan.get("lunch", [])])
            dinner = ", ".join([dish.get("name", "") for dish in today_plan.get("dinner", [])])
            
            context_parts.append(f"- K·∫ø ho·∫°ch h√¥m nay: "
                              f"B·ªØa s√°ng g·ªìm {breakfast}. "
                              f"B·ªØa tr∆∞a g·ªìm {lunch}. "
                              f"B·ªØa t·ªëi g·ªìm {dinner}.")

    # Th√¥ng tin nh·∫≠t k√Ω ƒë√£ ƒÉn
    if food_logs:
        # T√≠nh t·ªïng calo t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau
        eaten_calories = 0
        for log in food_logs:
            # C√°ch 1: T·ª´ total_nutrition (c·∫•u tr√∫c c≈©)
            if log.get('total_nutrition', {}).get('calories'):
                eaten_calories += log.get('total_nutrition', {}).get('calories', 0)
            # C√°ch 2: T·ª´ tr∆∞·ªùng calories (c·∫•u tr√∫c m·ªõi)
            elif log.get('calories'):
                eaten_calories += log.get('calories', 0)
            # C√°ch 3: T·ª´ items[].calories (c·∫•u tr√∫c m·ªõi)
            elif log.get('items'):
                for item in log.get('items', []):
                    eaten_calories += item.get('calories', 0)

        # Thu th·∫≠p t√™n c√°c m√≥n ƒÉn
        eaten_dishes = []
        for log in food_logs:
            # C√°ch 1: T·ª´ recognized_foods (c·∫•u tr√∫c c≈©)
            if log.get('recognized_foods'):
                for food in log.get('recognized_foods', []):
                    if food.get('food_name'):
                        eaten_dishes.append(food.get('food_name'))

            # C√°ch 2: T·ª´ items (c·∫•u tr√∫c m·ªõi)
            elif log.get('items'):
                for item in log.get('items', []):
                    if item.get('name'):
                        eaten_dishes.append(item.get('name'))

            # C√°ch 3: T·ª´ description (c·∫•u tr√∫c m·ªõi)
            elif log.get('description'):
                eaten_dishes.append(log.get('description'))

        # üîß FIX: ƒê·∫øm s·ªë b·ªØa ƒÉn th·ª±c t·∫ø v√† debug th√¥ng tin chi ti·∫øt
        print(f"[DEBUG] üçΩÔ∏è Ph√¢n t√≠ch {len(food_logs)} food logs:")
        for i, log in enumerate(food_logs):
            print(f"[DEBUG] üìù Log #{i+1}: meal_type={log.get('meal_type', 'N/A')}, description={log.get('description', 'N/A')}")
            print(f"[DEBUG] üìù Log #{i+1}: items={len(log.get('items', []))}, recognized_foods={len(log.get('recognized_foods', []))}")

        # ƒê·∫øm t·ªïng s·ªë m√≥n ƒÉn t·ª´ t·∫•t c·∫£ c√°c ngu·ªìn
        total_dishes = len(eaten_dishes)

        # üîß FIX: Ph√¢n t√≠ch meal_type ƒë·ªÉ ƒë·∫øm s·ªë b·ªØa ƒÉn kh√°c nhau - s·ª≠a l·ªói ƒë·∫øm sai
        unique_meals = set()
        meal_details = {}  # L∆∞u chi ti·∫øt t·ª´ng b·ªØa ƒÉn

        for log in food_logs:
            meal_type = log.get('meal_type', 'unknown')
            # üîß FIX: Ki·ªÉm tra meal_type ch·∫∑t ch·∫Ω h∆°n
            if meal_type and meal_type != 'unknown' and meal_type.strip():
                unique_meals.add(meal_type)
                if meal_type not in meal_details:
                    meal_details[meal_type] = []

                # Thu th·∫≠p m√≥n ƒÉn cho t·ª´ng b·ªØa
                if log.get('recognized_foods'):
                    for food in log.get('recognized_foods', []):
                        if food.get('food_name'):
                            meal_details[meal_type].append(food.get('food_name'))
                elif log.get('items'):
                    for item in log.get('items', []):
                        if item.get('name'):
                            meal_details[meal_type].append(item.get('name'))
                elif log.get('description'):
                    meal_details[meal_type].append(log.get('description'))

        print(f"[DEBUG] üçΩÔ∏è Unique meals found: {unique_meals}")
        print(f"[DEBUG] üçΩÔ∏è Meal details: {meal_details}")
        print(f"[DEBUG] üî¢ Meal count logic: unique_meals={len(unique_meals)}, total_logs={len(food_logs)}")

        # üîß FIX: T·∫°o th√¥ng tin chi ti·∫øt v·ªõi logic ch√≠nh x√°c h∆°n
        if eaten_dishes:
            if unique_meals:
                # C√≥ th√¥ng tin meal_type - hi·ªÉn th·ªã chi ti·∫øt t·ª´ng b·ªØa
                meal_summary = []
                for meal_type in sorted(unique_meals):
                    dishes_in_meal = meal_details.get(meal_type, [])
                    # Lo·∫°i b·ªè tr√πng l·∫∑p trong c√πng m·ªôt b·ªØa ƒÉn
                    unique_dishes_in_meal = list(set(dishes_in_meal))
                    if unique_dishes_in_meal:
                        meal_summary.append(f"{meal_type}: {', '.join(unique_dishes_in_meal)}")
                    else:
                        meal_summary.append(f"{meal_type}: kh√¥ng r√µ m√≥n ƒÉn")

                # üîß FIX: ƒê·∫øm s·ªë b·ªØa ƒÉn th·ª±c t·∫ø (unique meal types) - s·ª≠a l·ªói ƒë·∫øm sai
                actual_meal_count = len(unique_meals)
                print(f"[DEBUG] ‚úÖ ƒê·∫øm theo unique meal_types: {actual_meal_count} b·ªØa")
                context_parts.append(f"- Nh·∫≠t k√Ω ƒë√£ ƒÉn {time_label}: ƒê√£ ƒÉn {actual_meal_count} b·ªØa ({'; '.join(meal_summary)}). "
                                  f"T·ªïng calo ƒë√£ n·∫°p: {eaten_calories} kcal.")
            else:
                # üîß FIX: Kh√¥ng c√≥ meal_type - ƒë·∫øm theo s·ªë records (m·ªói record = 1 b·ªØa)
                actual_meal_count = len(food_logs)
                print(f"[DEBUG] ‚ö†Ô∏è Kh√¥ng c√≥ meal_type h·ª£p l·ªá, ƒë·∫øm theo s·ªë records: {actual_meal_count} b·ªØa")
                if len(food_logs) == 1:
                    context_parts.append(f"- Nh·∫≠t k√Ω ƒë√£ ƒÉn {time_label}: ƒê√£ ƒÉn 1 b·ªØa v·ªõi {total_dishes} m√≥n: {', '.join(eaten_dishes)}. "
                                      f"T·ªïng calo ƒë√£ n·∫°p: {eaten_calories} kcal.")
                else:
                    context_parts.append(f"- Nh·∫≠t k√Ω ƒë√£ ƒÉn {time_label}: ƒê√£ ƒÉn {len(food_logs)} b·ªØa v·ªõi {total_dishes} m√≥n: {', '.join(eaten_dishes)}. "
                                      f"T·ªïng calo ƒë√£ n·∫°p: {eaten_calories} kcal.")
        else:
            # Kh√¥ng c√≥ th√¥ng tin m√≥n ƒÉn chi ti·∫øt
            if unique_meals:
                context_parts.append(f"- Nh·∫≠t k√Ω ƒë√£ ƒÉn {time_label}: ƒê√£ ghi nh·∫≠n {len(unique_meals)} b·ªØa ƒÉn nh∆∞ng kh√¥ng c√≥ th√¥ng tin chi ti·∫øt.")
            else:
                if len(food_logs) == 1:
                    context_parts.append(f"- Nh·∫≠t k√Ω ƒë√£ ƒÉn {time_label}: ƒê√£ ghi nh·∫≠n 1 l·∫ßn ƒÉn nh∆∞ng kh√¥ng c√≥ th√¥ng tin chi ti·∫øt.")
                else:
                    context_parts.append(f"- Nh·∫≠t k√Ω ƒë√£ ƒÉn {time_label}: ƒê√£ ghi nh·∫≠n {len(food_logs)} l·∫ßn ghi nh·∫≠n th·ª±c ph·∫©m nh∆∞ng kh√¥ng c√≥ th√¥ng tin chi ti·∫øt.")
    else:
        context_parts.append(f"- Nh·∫≠t k√Ω ƒë√£ ƒÉn {time_label}: Ch∆∞a ghi nh·∫≠n b·ªØa n√†o.")
    
    # Th√¥ng tin b√†i t·∫≠p
    if exercise_history:
        # T√≠nh t·ªïng calo ƒë√£ ƒë·ªët
        burned_calories = 0
        for exercise in exercise_history:
            # C√°ch 1: T·ª´ calories_burned (c·∫•u tr√∫c c≈©)
            if 'calories_burned' in exercise:
                burned_calories += exercise.get('calories_burned', 0)
            # C√°ch 2: T·ª´ calories (c·∫•u tr√∫c m·ªõi)
            elif 'calories' in exercise:
                burned_calories += exercise.get('calories', 0)
        
        # Li·ªát k√™ c√°c b√†i t·∫≠p ƒë√£ th·ª±c hi·ªán
        exercise_list = []
        for exercise in exercise_history:
            # C√°ch 1: T·ª´ c·∫•u tr√∫c c≈©
            if exercise.get('exercise_name') and exercise.get('duration_minutes'):
                exercise_name = exercise.get('exercise_name')
                duration = exercise.get('duration_minutes')
                exercise_list.append(f"{exercise_name} ({duration} ph√∫t)")
            # C√°ch 2: T·ª´ c·∫•u tr√∫c m·ªõi
            elif exercise.get('name') and exercise.get('minutes'):
                exercise_name = exercise.get('name')
                duration = exercise.get('minutes')
                exercise_list.append(f"{exercise_name} ({duration} ph√∫t)")
        
        if exercise_list:
            if exercise_date and exercise_date != target_date_display:
                # D·ªØ li·ªáu t·ª´ ng√†y kh√°c - hi·ªÉn th·ªã r√µ r√†ng
                context_parts.append(f"- B√†i t·∫≠p {time_label}: Ch∆∞a ghi nh·∫≠n b√†i t·∫≠p n√†o. "
                                   f"(G·∫ßn nh·∫•t: {exercise_date} ƒë√£ t·∫≠p {len(exercise_history)} b√†i t·∫≠p: {', '.join(exercise_list)}, ƒë·ªët {burned_calories} kcal)")
            else:
                # D·ªØ li·ªáu ƒë√∫ng ng√†y ƒë∆∞·ª£c y√™u c·∫ßu
                context_parts.append(f"- B√†i t·∫≠p {time_label}: ƒê√£ t·∫≠p {len(exercise_history)} b√†i t·∫≠p: {', '.join(exercise_list)}. "
                                   f"T·ªïng calo ƒë√£ ƒë·ªët: {burned_calories} kcal.")
        else:
            if exercise_date and exercise_date != target_date_display:
                context_parts.append(f"- B√†i t·∫≠p {time_label}: Ch∆∞a ghi nh·∫≠n b√†i t·∫≠p n√†o. "
                                   f"(G·∫ßn nh·∫•t: {exercise_date} c√≥ {len(exercise_history)} ho·∫°t ƒë·ªông)")
            else:
                context_parts.append(f"- B√†i t·∫≠p {time_label}: ƒê√£ ghi nh·∫≠n {len(exercise_history)} ho·∫°t ƒë·ªông nh∆∞ng kh√¥ng c√≥ th√¥ng tin chi ti·∫øt.")
    else:
        context_parts.append(f"- B√†i t·∫≠p {time_label}: Ch∆∞a ghi nh·∫≠n b√†i t·∫≠p n√†o.")
    
    # Th√¥ng tin n∆∞·ªõc u·ªëng
    if water_intake:
        # T√≠nh t·ªïng l∆∞·ª£ng n∆∞·ªõc ƒë√£ u·ªëng
        total_water_ml = 0
        for intake in water_intake:
            # C√°ch 1: T·ª´ amount (c·∫•u tr√∫c m·ªõi t·ª´ Flutter)
            if 'amount' in intake:
                total_water_ml += intake.get('amount', 0)
            # C√°ch 2: T·ª´ amount_ml (c·∫•u tr√∫c c≈©)
            elif 'amount_ml' in intake:
                total_water_ml += intake.get('amount_ml', 0)
        
        # Chuy·ªÉn ƒë·ªïi sang l√≠t
        total_water_liter = total_water_ml / 1000
        
        # Ki·ªÉm tra c√≥ ƒë·∫°t m·ª•c ti√™u kh√¥ng
        water_target = 2000  # M·∫∑c ƒë·ªãnh 2 l√≠t (2000ml)
        
        # C·ªë g·∫Øng l·∫•y m·ª•c ti√™u t·ª´ user_profile
        if user_profile:
            if user_profile.get('waterTarget', {}).get('amount_ml'):
                water_target = user_profile.get('waterTarget', {}).get('amount_ml')
            elif user_profile.get('water_target'):
                water_target = user_profile.get('water_target')
        
        water_target_liter = water_target / 1000
        percentage = (total_water_liter / water_target_liter) * 100 if water_target_liter > 0 else 0
        
        if water_date and water_date != target_date_display:
            # D·ªØ li·ªáu t·ª´ ng√†y kh√°c - hi·ªÉn th·ªã r√µ r√†ng
            context_parts.append(f"- N∆∞·ªõc u·ªëng {time_label}: Ch∆∞a ghi nh·∫≠n l∆∞·ª£ng n∆∞·ªõc u·ªëng n√†o. "
                              f"(G·∫ßn nh·∫•t: {water_date} ƒë√£ u·ªëng {total_water_liter:.1f} l√≠t - {percentage:.0f}% m·ª•c ti√™u)")
        else:
            # D·ªØ li·ªáu ƒë√∫ng ng√†y ƒë∆∞·ª£c y√™u c·∫ßu
            context_parts.append(f"- N∆∞·ªõc u·ªëng {time_label}: ƒê√£ u·ªëng {total_water_liter:.1f} l√≠t n∆∞·ªõc "
                              f"({percentage:.0f}% m·ª•c ti√™u {water_target_liter:.1f} l√≠t).")
    else:
        context_parts.append(f"- N∆∞·ªõc u·ªëng {time_label}: Ch∆∞a ghi nh·∫≠n l∆∞·ª£ng n∆∞·ªõc u·ªëng n√†o.")
        
    return "\n".join(context_parts)

def analyze_user_nutrition(user_profile, food_logs, meal_plan):
    """
    Ph√¢n t√≠ch dinh d∆∞·ª°ng n√¢ng cao cho ng∆∞·ªùi d√πng
    """
    analysis_parts = []

    if not food_logs:
        return "Ch∆∞a c√≥ d·ªØ li·ªáu th·ª±c ph·∫©m ƒë·ªÉ ph√¢n t√≠ch."

    # T√≠nh t·ªïng macro nutrients
    total_calories = 0
    total_protein = 0
    total_carbs = 0
    total_fat = 0

    for log in food_logs:
        if log.get('total_nutrition'):
            total_calories += log.get('total_nutrition', {}).get('calories', 0)
            total_protein += log.get('total_nutrition', {}).get('protein', 0)
            total_carbs += log.get('total_nutrition', {}).get('carbs', 0)
            total_fat += log.get('total_nutrition', {}).get('fat', 0)
        elif log.get('items'):
            for item in log.get('items', []):
                total_calories += item.get('calories', 0)
                total_protein += item.get('protein', 0)
                total_carbs += item.get('carbs', 0)
                total_fat += item.get('fat', 0)

    # üîß FIX: L·∫•y m·ª•c ti√™u calories th·ª±c t·∫ø thay v√¨ TDEE - s·ª≠a l·ªói l·∫•y sai ch·ªâ s·ªë
    target_calories = 2000  # Default
    if user_profile:
        print(f"[DEBUG] üéØ T√¨m m·ª•c ti√™u calories trong user_profile keys: {list(user_profile.keys())}")

        # ∆Øu ti√™n l·∫•y t·ª´ caloriesGoal (m·ª•c ti√™u th·ª±c t·∫ø)
        if user_profile.get('caloriesGoal'):
            target_calories = user_profile.get('caloriesGoal')
            print(f"[DEBUG] ‚úÖ L·∫•y t·ª´ caloriesGoal: {target_calories}")
        # Fallback v·ªÅ dailyCaloriesGoal
        elif user_profile.get('dailyCaloriesGoal'):
            target_calories = user_profile.get('dailyCaloriesGoal')
            print(f"[DEBUG] ‚úÖ L·∫•y t·ª´ dailyCaloriesGoal: {target_calories}")
        # Fallback v·ªÅ goalCalories
        elif user_profile.get('goalCalories'):
            target_calories = user_profile.get('goalCalories')
            print(f"[DEBUG] ‚úÖ L·∫•y t·ª´ goalCalories: {target_calories}")
        # Fallback v·ªÅ calorie_goal
        elif user_profile.get('calorie_goal'):
            target_calories = user_profile.get('calorie_goal')
            print(f"[DEBUG] ‚úÖ L·∫•y t·ª´ calorie_goal: {target_calories}")
        # Fallback v·ªÅ nutrition_goals.calories
        elif user_profile.get('nutrition_goals', {}).get('calories'):
            target_calories = user_profile.get('nutrition_goals', {}).get('calories')
            print(f"[DEBUG] ‚úÖ L·∫•y t·ª´ nutrition_goals.calories: {target_calories}")
        # KH√îNG l·∫•y TDEE l√†m m·ª•c ti√™u - ƒë√¢y l√† l·ªói ch√≠nh
        else:
            print(f"[DEBUG] ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m·ª•c ti√™u calories, d√πng default: {target_calories}")
            # Kh√¥ng l·∫•y TDEE v√¨ ƒë√≥ l√† t·ªïng nƒÉng l∆∞·ª£ng ti√™u hao, kh√¥ng ph·∫£i m·ª•c ti√™u ƒÉn u·ªëng

    # T√≠nh ph·∫ßn trƒÉm macro
    if total_calories > 0:
        protein_percent = (total_protein * 4 / total_calories) * 100
        carbs_percent = (total_carbs * 4 / total_calories) * 100
        fat_percent = (total_fat * 9 / total_calories) * 100

        analysis_parts.append(f"‚Ä¢ T·ªïng calo: {total_calories:.0f}/{target_calories:.0f} kcal ({(total_calories/target_calories)*100:.0f}%)")
        analysis_parts.append(f"‚Ä¢ Protein: {total_protein:.1f}g ({protein_percent:.0f}% calo) - {'‚úÖ ƒê·∫°t' if 15 <= protein_percent <= 30 else '‚ö†Ô∏è C·∫ßn ƒëi·ªÅu ch·ªânh'}")
        analysis_parts.append(f"‚Ä¢ Carbs: {total_carbs:.1f}g ({carbs_percent:.0f}% calo) - {'‚úÖ ƒê·∫°t' if 45 <= carbs_percent <= 65 else '‚ö†Ô∏è C·∫ßn ƒëi·ªÅu ch·ªânh'}")
        analysis_parts.append(f"‚Ä¢ Fat: {total_fat:.1f}g ({fat_percent:.0f}% calo) - {'‚úÖ ƒê·∫°t' if 20 <= fat_percent <= 35 else '‚ö†Ô∏è C·∫ßn ƒëi·ªÅu ch·ªânh'}")

        # ƒê√°nh gi√° t·ªïng th·ªÉ
        if total_calories < target_calories * 0.8:
            analysis_parts.append("‚ö†Ô∏è Calo th·∫•p h∆°n m·ª•c ti√™u - c√≥ th·ªÉ c·∫ßn tƒÉng kh·∫©u ph·∫ßn")
        elif total_calories > target_calories * 1.2:
            analysis_parts.append("‚ö†Ô∏è Calo cao h∆°n m·ª•c ti√™u - c√≥ th·ªÉ c·∫ßn gi·∫£m kh·∫©u ph·∫ßn")
        else:
            analysis_parts.append("‚úÖ Calo trong t·∫ßm ki·ªÉm so√°t")

    return "\n".join(analysis_parts) if analysis_parts else "Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch chi ti·∫øt."

def get_usda_nutrition_data(food_name):
    """
    L·∫•y d·ªØ li·ªáu dinh d∆∞·ª°ng t·ª´ USDA API (sync version)
    """
    try:
        import requests

        api_key = os.getenv("USDA_API_KEY", "GJRAy2mRHxo2FiejluDsPDBhzPvUL3J8xhihsKh2")
        url = "https://api.nal.usda.gov/fdc/v1/foods/search"

        params = {
            "query": food_name,
            "pageSize": 3,
            "api_key": api_key,
            "dataType": ["Foundation", "SR Legacy"]
        }

        response = requests.get(url, params=params, timeout=10)

        if response.status_code == 200:
            data = response.json()
            foods = data.get("foods", [])

            if foods:
                food = foods[0]  # Take first result
                nutrients = food.get("foodNutrients", [])

                # Extract key nutrients
                nutrition_info = {
                    "name": food.get("description", "Unknown food"),
                    "fdc_id": food.get("fdcId"),
                    "calories": 0,
                    "protein": 0,
                    "carbs": 0,
                    "fat": 0,
                    "fiber": 0,
                    "sodium": 0
                }

                nutrient_map = {
                    "Energy": "calories",
                    "Protein": "protein",
                    "Total lipid (fat)": "fat",
                    "Carbohydrate, by difference": "carbs",
                    "Fiber, total dietary": "fiber",
                    "Sodium, Na": "sodium"
                }

                for nutrient in nutrients:
                    name = nutrient.get("nutrient", {}).get("name", "")
                    amount = nutrient.get("amount", 0)

                    for usda_name, key in nutrient_map.items():
                        if usda_name in name:
                            nutrition_info[key] = amount
                            break

                return nutrition_info

    except Exception as e:
        print(f"Error getting USDA data for {food_name}: {e}")

    return None

def get_intelligent_food_recommendations_sync(user_message, user_profile, food_logs):
    """
    T·∫°o g·ª£i √Ω th·ª±c ph·∫©m th√¥ng minh d·ª±a tr√™n professional nutrition data
    """
    recommendations = []

    # Ph√¢n t√≠ch t·ª´ kh√≥a trong tin nh·∫Øn
    message_lower = user_message.lower()

    # T√¨m ki·∫øm th·ª±c ph·∫©m c·ª• th·ªÉ trong tin nh·∫Øn ƒë·ªÉ l·∫•y d·ªØ li·ªáu USDA
    food_keywords = ['g·∫°o', 'rice', 'th·ªãt b√≤', 'beef', 'c√°', 'fish', 'tr·ª©ng', 'egg', 's·ªØa', 'milk']
    found_food = None

    for keyword in food_keywords:
        if keyword in message_lower:
            found_food = keyword
            break

    # N·∫øu t√¨m th·∫•y th·ª±c ph·∫©m, l·∫•y d·ªØ li·ªáu USDA
    if found_food:
        usda_data = get_usda_nutrition_data(found_food)
        if usda_data:
            recommendations.append(f"üìä USDA DATA - {usda_data['name']}:")
            recommendations.append(f"‚Ä¢ Calories: {usda_data['calories']:.1f} kcal/100g")
            recommendations.append(f"‚Ä¢ Protein: {usda_data['protein']:.1f}g")
            recommendations.append(f"‚Ä¢ Carbs: {usda_data['carbs']:.1f}g")
            recommendations.append(f"‚Ä¢ Fat: {usda_data['fat']:.1f}g")
            recommendations.append(f"‚Ä¢ Ngu·ªìn: USDA FoodData Central (FDC ID: {usda_data['fdc_id']})")

    # G·ª£i √Ω d·ª±a tr√™n health conditions
    if any(keyword in message_lower for keyword in ['ti·ªÉu ƒë∆∞·ªùng', 'diabetes', 'ƒë∆∞·ªùng huy·∫øt']):
        recommendations.append("\nü©∫ CHO NG∆Ø·ªúI TI·ªÇU ƒê∆Ø·ªúNG:")
        recommendations.append("‚Ä¢ M√≥n ph√π h·ª£p: B√∫n b√≤ Hu·∫ø (GI th·∫•p), G·ªèi cu·ªën (√≠t carbs)")
        recommendations.append("‚Ä¢ Tr√°nh: C∆°m tr·∫Øng, b√°nh ng·ªçt, n∆∞·ªõc ng·ªçt")
        recommendations.append("‚Ä¢ Ngu·ªìn: Hi·ªáp h·ªôi Ti·ªÉu ƒë∆∞·ªùng Vi·ªát Nam")

    elif any(keyword in message_lower for keyword in ['cao huy·∫øt √°p', 'huy·∫øt √°p', 'hypertension']):
        recommendations.append("\nüíì CHO NG∆Ø·ªúI CAO HUY·∫æT √ÅP:")
        recommendations.append("‚Ä¢ M√≥n ph√π h·ª£p: G·ªèi cu·ªën (√≠t sodium), Ph·ªü kh√¥ng MSG")
        recommendations.append("‚Ä¢ Tr√°nh: ƒê·ªì ƒÉn m·∫∑n, th·ª±c ph·∫©m ch·∫ø bi·∫øn s·∫µn")
        recommendations.append("‚Ä¢ Ngu·ªìn: B·ªô Y t·∫ø Vi·ªát Nam - DASH Diet")

    elif any(keyword in message_lower for keyword in ['gi·∫£m c√¢n', 'weight loss', 'b√©o ph√¨']):
        recommendations.append("\n‚öñÔ∏è CHO NG∆Ø·ªúI GI·∫¢M C√ÇN:")
        recommendations.append("‚Ä¢ M√≥n ph√π h·ª£p: G·ªèi cu·ªën (96 kcal/cu·ªën), Ph·ªü g√† (√≠t calo h∆°n ph·ªü b√≤)")
        recommendations.append("‚Ä¢ TƒÉng: Rau xanh, protein lean, ch·∫•t x∆°")
        recommendations.append("‚Ä¢ Ngu·ªìn: Vi·ªán Dinh d∆∞·ª°ng Qu·ªëc gia")

    elif any(keyword in message_lower for keyword in ['protein', 'tƒÉng c√¢n', 'muscle']):
        recommendations.append("\nüí™ CHO NG∆Ø·ªúI TƒÇNG C√ÇN/C∆† B·∫ÆP:")
        recommendations.append("‚Ä¢ M√≥n gi√†u protein: C∆°m t·∫•m (22.5g protein), Ph·ªü b√≤ (15.2g protein)")
        recommendations.append("‚Ä¢ Th√™m: Tr·ª©ng, ƒë·∫≠u ph·ª•, c√° h·ªìi")
        recommendations.append("‚Ä¢ Ngu·ªìn: USDA FoodData Central")

    # G·ª£i √Ω d·ª±a tr√™n thi·∫øu h·ª•t dinh d∆∞·ª°ng (t·ª´ food logs)
    if food_logs:
        total_iron = sum(log.get('total_nutrition', {}).get('iron', 0) for log in food_logs)
        if total_iron < 10:  # Thi·∫øu s·∫Øt
            recommendations.append("\nü©∏ THI·∫æU S·∫ÆT:")
            recommendations.append("‚Ä¢ Th√™m: Th·ªãt ƒë·ªè, gan, rau bina v√†o ph·ªü")
            recommendations.append("‚Ä¢ TƒÉng h·∫•p thu: ƒÇn k√®m vitamin C (cam, ·ªïi)")

    # G·ª£i √Ω m√≥n Vi·ªát theo m√πa
    current_month = datetime.now().month
    if current_month in [12, 1, 2]:  # M√πa ƒë√¥ng
        recommendations.append("\n‚ùÑÔ∏è M√ôA ƒê√îNG:")
        recommendations.append("‚Ä¢ B√∫n b√≤ Hu·∫ø (·∫•m b·ª•ng), Ph·ªü b√≤ (b·ªï d∆∞·ª°ng)")
    elif current_month in [6, 7, 8]:  # M√πa h√®
        recommendations.append("\n‚òÄÔ∏è M√ôA H√à:")
        recommendations.append("‚Ä¢ G·ªèi cu·ªën (m√°t, √≠t calo), Ch√® (gi·∫£i nhi·ªát)")

    return "\n".join(recommendations) if recommendations else "Kh√¥ng c√≥ g·ª£i √Ω c·ª• th·ªÉ cho c√¢u h·ªèi n√†y."

def parse_date_context(user_message):
    """
    Ph√¢n t√≠ch tin nh·∫Øn ng∆∞·ªùi d√πng ƒë·ªÉ x√°c ƒë·ªãnh ng√†y ƒë∆∞·ª£c h·ªèi

    Args:
        user_message: Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng

    Returns:
        tuple: (target_date_str, context_type)
        - target_date_str: Ng√†y ƒë∆∞·ª£c y√™u c·∫ßu (YYYY-MM-DD)
        - context_type: Lo·∫°i ng·ªØ c·∫£nh ('today', 'yesterday', 'specific_date', 'relative')
    """
    vietnam_now = datetime.now(VIETNAM_TZ)
    today_str = vietnam_now.strftime("%Y-%m-%d")
    yesterday_str = (vietnam_now - timedelta(days=1)).strftime("%Y-%m-%d")

    # Chuy·ªÉn tin nh·∫Øn v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ d·ªÖ ph√¢n t√≠ch
    message_lower = user_message.lower().strip()

    # C√°c t·ª´ kh√≥a ch·ªâ th·ªùi gian
    yesterday_keywords = ['h√¥m qua', 'ng√†y h√¥m qua', 'qua', 'yesterday']
    today_keywords = ['h√¥m nay', 'ng√†y h√¥m nay', 'today', 'hi·ªán t·∫°i']

    # Ki·ªÉm tra t·ª´ kh√≥a "h√¥m qua"
    for keyword in yesterday_keywords:
        if keyword in message_lower:
            return yesterday_str, 'yesterday'

    # Ki·ªÉm tra t·ª´ kh√≥a "h√¥m nay"
    for keyword in today_keywords:
        if keyword in message_lower:
            return today_str, 'today'

    # Ki·ªÉm tra c√°c ng√†y t∆∞∆°ng ƒë·ªëi kh√°c
    relative_patterns = [
        (r'(\d+)\s*ng√†y\s*tr∆∞·ªõc', lambda x: (vietnam_now - timedelta(days=int(x))).strftime("%Y-%m-%d")),
        (r'(\d+)\s*ng√†y\s*qua', lambda x: (vietnam_now - timedelta(days=int(x))).strftime("%Y-%m-%d")),
        (r'tu·∫ßn\s*tr∆∞·ªõc', lambda _: (vietnam_now - timedelta(days=7)).strftime("%Y-%m-%d")),
        (r'tu·∫ßn\s*qua', lambda _: (vietnam_now - timedelta(days=7)).strftime("%Y-%m-%d"))
    ]

    for pattern, date_func in relative_patterns:
        match = re.search(pattern, message_lower)
        if match:
            try:
                if pattern.startswith(r'(\d+)'):
                    days = match.group(1)
                    return date_func(days), 'relative'
                else:
                    return date_func(None), 'relative'
            except:
                continue

    # Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y c·ª• th·ªÉ (DD/MM/YYYY, DD-MM-YYYY)
    date_patterns = [
        r'(\d{1,2})[/-](\d{1,2})[/-](\d{4})',  # DD/MM/YYYY ho·∫∑c DD-MM-YYYY
        r'(\d{4})[/-](\d{1,2})[/-](\d{1,2})'   # YYYY/MM/DD ho·∫∑c YYYY-MM-DD
    ]

    for pattern in date_patterns:
        match = re.search(pattern, message_lower)
        if match:
            try:
                if pattern.startswith(r'(\d{1,2})'):  # DD/MM/YYYY
                    day, month, year = match.groups()
                    target_date = datetime(int(year), int(month), int(day))
                else:  # YYYY/MM/DD
                    year, month, day = match.groups()
                    target_date = datetime(int(year), int(month), int(day))

                return target_date.strftime("%Y-%m-%d"), 'specific_date'
            except:
                continue

    # M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ h√¥m nay
    return today_str, 'today'

# Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng qu·∫£n l√Ω l·ªãch s·ª≠ chat
chat_history = ChatHistoryManager()

@app.route('/chat', methods=['POST'])
def chat():
    """
    Endpoint nh·∫≠n tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng, x·ª≠ l√Ω qua Groq API v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi
    S·ª≠ d·ª•ng k·ªπ thu·∫≠t RAG (Retrieval-Augmented Generation) ƒë·ªÉ c√° nh√¢n h√≥a ph·∫£n h·ªìi
    
    V√≠ d·ª• request: {"message": "M√≥n ƒÉn n√†o t·ªët cho ng∆∞·ªùi b·ªã ti·ªÉu ƒë∆∞·ªùng?", "user_id": "user123"}
    V√≠ d·ª• response: {"reply": "C√≥ nhi·ªÅu m√≥n ƒÉn ph√π h·ª£p cho ng∆∞·ªùi ti·ªÉu ƒë∆∞·ªùng...", "chat_id": "abc123"}
    """
    try:
        # Nh·∫≠n message t·ª´ request
        data = request.get_json()
        if not data or 'message' not in data:
            return jsonify({"error": "Vui l√≤ng cung c·∫•p tin nh·∫Øn trong tr∆∞·ªùng 'message'"}), 400
            
        user_message = data['message']
        # L·∫•y user_id t·ª´ request, n·∫øu kh√¥ng c√≥ th√¨ d√πng "anonymous"
        user_id = data.get('user_id', 'anonymous')
        
        # √Åp d·ª•ng RAG: Truy xu·∫•t d·ªØ li·ªáu ng∆∞·ªùi d√πng t·ª´ Firestore
        use_rag = True  # C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh th√†nh tham s·ªë trong request
        augmented_prompt = user_message
        
        try:
            if use_rag and user_id != 'anonymous':
                print(f"Chat request for user: {user_id}")
                # Import module firestore_service v√† professional nutrition APIs
                from services.firestore_service import firestore_service
                from services.nutrition_api_service import nutrition_api

                # 0. Ph√¢n t√≠ch ng·ªØ c·∫£nh th·ªùi gian t·ª´ tin nh·∫Øn ng∆∞·ªùi d√πng
                target_date, context_type = parse_date_context(user_message)
                print(f"[DEBUG] üïê Ph√¢n t√≠ch ng·ªØ c·∫£nh: target_date={target_date}, context_type={context_type}")

                # 1. L·∫•y h·ªì s∆° ng∆∞·ªùi d√πng
                user_profile = firestore_service.get_user(user_id) or {}

                # 2. L·∫•y k·∫ø ho·∫°ch ƒÉn m·ªõi nh·∫•t
                meal_plan_data = firestore_service.get_latest_meal_plan(user_id)
                meal_plan_dict = meal_plan_data.dict() if meal_plan_data else {}

                # 3. L·∫•y nh·∫≠t k√Ω ƒÉn u·ªëng theo ng√†y ƒë∆∞·ª£c y√™u c·∫ßu
                vietnam_now = datetime.now(VIETNAM_TZ)
                today_str = vietnam_now.strftime("%Y-%m-%d")
                print(f"[DEBUG] ‚è∞ Th·ªùi gian hi·ªán t·∫°i (VN): {vietnam_now.isoformat()}")
                print(f"[DEBUG] üìÖ ƒêang truy v·∫•n d·ªØ li·ªáu cho ng√†y: {target_date} (context: {context_type})")
                print(f"[DEBUG] üåè Timezone: {VIETNAM_TZ}")
                food_logs_target = firestore_service.get_food_logs_by_date(user_id, target_date) or []
                print(f"[DEBUG] üçΩÔ∏è T√¨m th·∫•y {len(food_logs_target)} food logs cho ng√†y {target_date}")

                # Debug chi ti·∫øt t·ª´ng food log
                for i, log in enumerate(food_logs_target):
                    print(f"[DEBUG] üìù Food Log #{i+1}:")
                    print(f"[DEBUG]   - ID: {log.get('id', 'N/A')}")
                    print(f"[DEBUG]   - Date: {log.get('date', 'N/A')}")
                    print(f"[DEBUG]   - Meal Type: {log.get('meal_type', 'N/A')}")
                    print(f"[DEBUG]   - Description: {log.get('description', 'N/A')}")
                    print(f"[DEBUG]   - Items count: {len(log.get('items', []))}")
                    print(f"[DEBUG]   - Recognized foods count: {len(log.get('recognized_foods', []))}")
                    print(f"[DEBUG]   - Timestamp: {log.get('timestamp', 'N/A')}")
                    print(f"[DEBUG]   - Created at: {log.get('created_at', 'N/A')}")

                # 4. L·∫•y th√¥ng tin b√†i t·∫≠p theo ng√†y ƒë∆∞·ª£c y√™u c·∫ßu - v·ªõi fallback logic
                print(f"[DEBUG] ƒêang truy v·∫•n d·ªØ li·ªáu b√†i t·∫≠p cho user {user_id} v·ªõi ng√†y {target_date}...")
                exercise_history = firestore_service.get_exercise_history(user_id, start_date=target_date, end_date=target_date) or []
                print(f"[DEBUG] T√¨m th·∫•y {len(exercise_history)} b√†i t·∫≠p cho ng√†y {target_date}")
                if exercise_history:
                    for ex in exercise_history:
                        print(f"[DEBUG] B√†i t·∫≠p: {ex.get('exercise_name', 'N/A')} - {ex.get('date', 'N/A')}")

                # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y ƒë∆∞·ª£c y√™u c·∫ßu, th·ª≠ t√¨m d·ªØ li·ªáu g·∫ßn nh·∫•t (trong 7 ng√†y qua)
                exercise_date = target_date  # M·∫∑c ƒë·ªãnh l√† ng√†y ƒë∆∞·ª£c y√™u c·∫ßu
                if not exercise_history and context_type in ['today', 'yesterday']:
                    # Ch·ªâ fallback khi h·ªèi v·ªÅ h√¥m nay/h√¥m qua
                    for days_back in range(1, 8):  # T√¨m trong 7 ng√†y qua
                        past_date = (datetime.now(VIETNAM_TZ) - timedelta(days=days_back)).strftime("%Y-%m-%d")
                        exercise_history = firestore_service.get_exercise_history(user_id, start_date=past_date, end_date=past_date) or []
                        if exercise_history:
                            exercise_date = past_date
                            print(f"[DEBUG] T√¨m th·∫•y d·ªØ li·ªáu b√†i t·∫≠p g·∫ßn nh·∫•t v√†o ng√†y: {past_date}")
                            break

                # 5. L·∫•y th√¥ng tin n∆∞·ªõc u·ªëng theo ng√†y ƒë∆∞·ª£c y√™u c·∫ßu - v·ªõi fallback logic
                print(f"[DEBUG] ƒêang truy v·∫•n d·ªØ li·ªáu n∆∞·ªõc u·ªëng cho user {user_id} v·ªõi ng√†y {target_date}...")
                water_intake = firestore_service.get_water_intake_by_date(user_id, target_date) or []
                print(f"[DEBUG] T√¨m th·∫•y {len(water_intake)} l∆∞·ª£t u·ªëng n∆∞·ªõc cho ng√†y {target_date}")
                if water_intake:
                    for water in water_intake:
                        print(f"[DEBUG] N∆∞·ªõc u·ªëng: {water.get('amount_ml', 'N/A')}ml - {water.get('date', 'N/A')}")

                # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y ƒë∆∞·ª£c y√™u c·∫ßu, th·ª≠ t√¨m d·ªØ li·ªáu g·∫ßn nh·∫•t (trong 7 ng√†y qua)
                water_date = target_date  # M·∫∑c ƒë·ªãnh l√† ng√†y ƒë∆∞·ª£c y√™u c·∫ßu
                if not water_intake and context_type in ['today', 'yesterday']:
                    # Ch·ªâ fallback khi h·ªèi v·ªÅ h√¥m nay/h√¥m qua
                    for days_back in range(1, 8):  # T√¨m trong 7 ng√†y qua
                        past_date = (datetime.now(VIETNAM_TZ) - timedelta(days=days_back)).strftime("%Y-%m-%d")
                        water_intake = firestore_service.get_water_intake_by_date(user_id, past_date) or []
                        if water_intake:
                            water_date = past_date
                            print(f"[DEBUG] T√¨m th·∫•y d·ªØ li·ªáu n∆∞·ªõc u·ªëng g·∫ßn nh·∫•t v√†o ng√†y: {past_date}")
                            break
                
                # Ki·ªÉm tra c√°c collection Firebase ƒëang s·ª≠ d·ª•ng
                print(f"[DEBUG] Ki·ªÉm tra collections Firebase: users, exercises, exercise_histories, water_entries, water_intake")
                
                # T·∫°o context t·ª´ d·ªØ li·ªáu ƒë√£ truy xu·∫•t
                context_data = format_user_context(
                    user_profile,
                    meal_plan_dict,
                    food_logs_target,
                    exercise_history,
                    water_intake,
                    exercise_date,
                    water_date,
                    target_date,
                    context_type
                )

                # Th√™m nutrition analysis n√¢ng cao v·ªõi professional data
                nutrition_analysis = analyze_user_nutrition(user_profile, food_logs_target, meal_plan_dict)
                if nutrition_analysis:
                    context_data += f"\n\nüî¨ PH√ÇN T√çCH DINH D∆Ø·ª†NG N√ÇNG CAO:\n{nutrition_analysis}"

                # Th√™m intelligent food recommendations (sync version)
                food_recommendations = get_intelligent_food_recommendations_sync(user_message, user_profile, food_logs_target)
                if food_recommendations:
                    context_data += f"\n\nüéØ G·ª¢I √ù TH·ª∞C PH·∫®M TH√îNG MINH:\n{food_recommendations}"
                
                # X√¢y d·ª±ng prompt th√¥ng minh v·ªõi ng·ªØ c·∫£nh th·ªùi gian
                time_context_note = ""
                if context_type == 'yesterday':
                    time_context_note = f"\n‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG: Ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ H√îM QUA ({target_date}), KH√îNG PH·∫¢I h√¥m nay. H√£y tr·∫£ l·ªùi ch√≠nh x√°c v·ªÅ d·ªØ li·ªáu h√¥m qua."
                elif context_type == 'specific_date':
                    time_context_note = f"\n‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG: Ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ ng√†y {target_date}, KH√îNG PH·∫¢I h√¥m nay. H√£y tr·∫£ l·ªùi ch√≠nh x√°c v·ªÅ d·ªØ li·ªáu ng√†y ƒë√≥."
                elif context_type == 'relative':
                    time_context_note = f"\n‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG: Ng∆∞·ªùi d√πng ƒëang h·ªèi v·ªÅ ng√†y {target_date}, KH√îNG PH·∫¢I h√¥m nay. H√£y tr·∫£ l·ªùi ch√≠nh x√°c v·ªÅ d·ªØ li·ªáu ng√†y ƒë√≥."

                augmented_prompt = f"""B·∫°n l√† m·ªôt tr·ª£ l√Ω dinh d∆∞·ª°ng ·∫£o t√™n l√† DietAI. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n th√¥ng tin c√° nh√¢n v√† ho·∫°t ƒë·ªông h√†ng ng√†y c·ªßa h·ªç.{time_context_note}

--- D·ªÆ LI·ªÜU C√Å NH√ÇN C·ª¶A NG∆Ø·ªúI D√ôNG ---
{context_data}
--- K·∫æT TH√öC D·ªÆ LI·ªÜU ---

H∆Ø·ªöNG D·∫™N TR·∫¢I L·ªúI:
1. ƒê·ªçc k·ªπ d·ªØ li·ªáu tr√™n v√† ch√∫ √Ω ƒë·∫øn ng√†y c·ª• th·ªÉ ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p
2. Tr·∫£ l·ªùi ch√≠nh x√°c theo ng√†y m√† ng∆∞·ªùi d√πng h·ªèi (h√¥m nay, h√¥m qua, hay ng√†y c·ª• th·ªÉ)
3. N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y ƒë∆∞·ª£c h·ªèi, h√£y n√≥i r√µ "kh√¥ng c√≥ d·ªØ li·ªáu" thay v√¨ d√πng d·ªØ li·ªáu t·ª´ ng√†y kh√°c
4. S·ª≠ d·ª•ng ng√¥n ng·ªØ th√¢n thi·ªán v√† ch√≠nh x√°c b·∫±ng ti·∫øng Vi·ªát

C√¢u h·ªèi: "{user_message}"
"""
                print(f"DEBUG: Using RAG with augmented prompt")
        except Exception as e:
            print(f"L·ªói khi √°p d·ª•ng RAG: {str(e)}")
            print(f"Ti·∫øp t·ª•c v·ªõi prompt th√¥ng th∆∞·ªùng")
            use_rag = False
            import traceback
            traceback.print_exc()
        
        # Ch·ªù th√™m m·ªôt ch√∫t tr∆∞·ªõc khi g·ªçi API ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        time.sleep(0.5)
        
        # G·ªçi Groq API v·ªõi system prompt v√† user message
        completion = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[
                {
                    "role": "system",
                    "content": get_enhanced_nutrition_system_prompt(use_rag)
                },
                {
                    "role": "user", 
                    "content": augmented_prompt
                }
            ],
            temperature=0.7,
        )
        
        # Tr√≠ch xu·∫•t ph·∫£n h·ªìi t·ª´ AI
        ai_reply = completion.choices[0].message.content
        
        # L∆∞u l·ªãch s·ª≠ chat v√†o Firebase
        chat_id = chat_history.save_chat(user_id, user_message, ai_reply, augmented=use_rag)
        
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng JSON
        return jsonify({
            "reply": ai_reply, 
            "chat_id": chat_id
        })
        
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω chat: {str(e)}")
        return jsonify({"error": f"ƒê√£ x·∫£y ra l·ªói: {str(e)}"}), 500

@app.route('/chat/history', methods=['GET'])
def get_chat_history():
    """
    Endpoint tr·∫£ v·ªÅ l·ªãch s·ª≠ chat c·ªßa m·ªôt ng∆∞·ªùi d√πng
    V√≠ d·ª• request: GET /chat/history?user_id=user123&limit=5
    """
    try:
        # L·∫•y user_id t·ª´ query parameters
        user_id = request.args.get('user_id', 'anonymous')
        limit = int(request.args.get('limit', 10))
        
        # L·∫•y l·ªãch s·ª≠ chat
        history = chat_history.get_user_chat_history(user_id, limit)
        
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng JSON
        return jsonify({
            "history": history,
            "count": len(history)
        })
        
    except Exception as e:
        print(f"L·ªói khi l·∫•y l·ªãch s·ª≠ chat: {str(e)}")
        return jsonify({"error": f"ƒê√£ x·∫£y ra l·ªói: {str(e)}"}), 500

if __name__ == "__main__":
    # Ch·∫°y server Flask ·ªü c·ªïng 5000
    app.run(debug=True, host="0.0.0.0", port=5000) 