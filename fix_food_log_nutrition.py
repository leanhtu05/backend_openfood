"""
Script ƒë·ªÉ s·ª≠a l·ªói t√≠nh to√°n dinh d∆∞·ª°ng trong food_records

V·∫•n ƒë·ªÅ: Th√¥ng tin dinh d∆∞·ª°ng (nutritionInfo) trong food_records
ch·ªâ ƒëang ch·ª©a th√¥ng tin c·ªßa m√≥n ƒë·∫ßu ti√™n thay v√¨ t·ªïng dinh d∆∞·ª°ng
c·ªßa t·∫•t c·∫£ c√°c m√≥n trong danh s√°ch.

Script n√†y s·∫Ω:
1. L·∫•y t·∫•t c·∫£ food_records t·ª´ Firestore
2. T√≠nh l·∫°i t·ªïng dinh d∆∞·ª°ng t·ª´ danh s√°ch items
3. C·∫≠p nh·∫≠t l·∫°i th√¥ng tin dinh d∆∞·ª°ng trong Firestore
"""

import firebase_admin
from firebase_admin import credentials, firestore
import argparse
import time
from datetime import datetime
import traceback


def init_firebase():
    """Kh·ªüi t·∫°o k·∫øt n·ªëi Firebase"""
    try:
        # Ki·ªÉm tra xem ƒë√£ kh·ªüi t·∫°o ch∆∞a
        firebase_admin.get_app()
        print("Firebase Admin SDK ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥.")
    except ValueError:
        # N·∫øu ch∆∞a kh·ªüi t·∫°o, th√¨ kh·ªüi t·∫°o m·ªõi
        try:
            cred = credentials.Certificate("firebase-credentials.json")
            firebase_admin.initialize_app(cred)
            print("Firebase Admin SDK ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")
        except Exception as e:
            print(f"L·ªói khi kh·ªüi t·∫°o Firebase Admin SDK: {e}")
            return False
    return True


def calculate_total_nutrition(food_items):
    """T√≠nh t·ªïng dinh d∆∞·ª°ng t·ª´ danh s√°ch m√≥n ƒÉn"""
    total_nutrition = {
        'calories': 0,
        'protein': 0,
        'carbs': 0,
        'fat': 0,
        'fiber': 0,
        'sugar': 0,
        'sodium': 0
    }
    
    for item in food_items:
        # C·ªông d·ªìn c√°c gi√° tr·ªã dinh d∆∞·ª°ng
        total_nutrition['calories'] += item.get('calories', 0)
        total_nutrition['protein'] += item.get('protein', 0)
        total_nutrition['carbs'] += item.get('carbs', 0)
        total_nutrition['fat'] += item.get('fat', 0)
        
        # C√°c gi√° tr·ªã c√≥ th·ªÉ kh√¥ng c√≥ trong t·∫•t c·∫£ c√°c m√≥n
        if 'fiber' in item:
            total_nutrition['fiber'] += item.get('fiber', 0)
        if 'sugar' in item:
            total_nutrition['sugar'] += item.get('sugar', 0)
        if 'sodium' in item:
            total_nutrition['sodium'] += item.get('sodium', 0)
    
    return total_nutrition


def fix_food_logs(user_id=None, dry_run=True):
    """
    S·ª≠a l·ªói t√≠nh to√°n dinh d∆∞·ª°ng trong food_records
    
    Args:
        user_id: ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn s·ª≠a. N·∫øu None, s·ª≠a t·∫•t c·∫£ ng∆∞·ªùi d√πng.
        dry_run: N·∫øu True, ch·ªâ in ra th√¥ng tin thay ƒë·ªïi m√† kh√¥ng c·∫≠p nh·∫≠t th·ª±c s·ª±.
    """
    db = firestore.client()
    
    # ƒê·∫øm s·ªë l∆∞·ª£ng b·∫£n ghi ƒë∆∞·ª£c x·ª≠ l√Ω
    stats = {
        'total_processed': 0,
        'updated': 0,
        'skipped': 0,
        'errors': 0
    }
    
    try:
        # N·∫øu c√≥ user_id, ch·ªâ x·ª≠ l√Ω b·∫£n ghi c·ªßa ng∆∞·ªùi d√πng ƒë√≥
        if user_id:
            users_ref = [db.collection('users').document(user_id)]
        else:
            # L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng
            users_ref = db.collection('users').stream()
        
        # Duy·ªát qua t·ª´ng ng∆∞·ªùi d√πng
        for user_doc in users_ref:
            current_user_id = user_id if user_id else user_doc.id
            print(f"\nX·ª≠ l√Ω user_id: {current_user_id}")
            
            # L·∫•y t·∫•t c·∫£ food_records c·ªßa ng∆∞·ªùi d√πng
            food_logs_ref = db.collection('users').document(current_user_id).collection('food_records').stream()
            
            # Duy·ªát qua t·ª´ng b·∫£n ghi
            for log in food_logs_ref:
                stats['total_processed'] += 1
                log_data = log.to_dict()
                log_id = log.id
                
                print(f"\nB·∫£n ghi {log_id}:")
                
                # Ki·ªÉm tra xem c√≥ items kh√¥ng
                if 'items' not in log_data or not isinstance(log_data['items'], list) or not log_data['items']:
                    print(f"  B·ªè qua: Kh√¥ng c√≥ items ho·∫∑c items r·ªóng")
                    stats['skipped'] += 1
                    continue
                
                # T√≠nh l·∫°i t·ªïng dinh d∆∞·ª°ng
                new_nutrition = calculate_total_nutrition(log_data['items'])
                
                # So s√°nh v·ªõi dinh d∆∞·ª°ng hi·ªán t·∫°i
                current_nutrition = log_data.get('nutritionInfo', {})
                current_calories = log_data.get('calories', 0)
                
                print(f"  Calories hi·ªán t·∫°i: {current_calories}")
                print(f"  Calories m·ªõi t√≠nh: {new_nutrition['calories']}")
                
                # N·∫øu kh√¥ng c√≥ s·ª± kh√°c bi·ªát ƒë√°ng k·ªÉ, b·ªè qua
                if abs(current_calories - new_nutrition['calories']) < 1:
                    print(f"  B·ªè qua: Dinh d∆∞·ª°ng ƒë√£ ƒë√∫ng")
                    stats['skipped'] += 1
                    continue
                
                # C·∫≠p nh·∫≠t d·ªØ li·ªáu
                update_data = {
                    'nutritionInfo': new_nutrition,
                    'calories': new_nutrition['calories'],
                    'updated_at': datetime.now().isoformat()
                }
                
                print(f"  C·∫≠p nh·∫≠t dinh d∆∞·ª°ng:")
                print(f"    - Protein: {current_nutrition.get('protein', 0)} -> {new_nutrition['protein']}")
                print(f"    - Carbs: {current_nutrition.get('carbs', 0)} -> {new_nutrition['carbs']}")
                print(f"    - Fat: {current_nutrition.get('fat', 0)} -> {new_nutrition['fat']}")
                
                if not dry_run:
                    try:
                        # C·∫≠p nh·∫≠t v√†o Firestore
                        db.collection('users').document(current_user_id).collection('food_records').document(log_id).update(update_data)
                        print(f"  ‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!")
                        stats['updated'] += 1
                    except Exception as e:
                        print(f"  ‚ùå L·ªói khi c·∫≠p nh·∫≠t: {e}")
                        stats['errors'] += 1
                else:
                    print(f"  üîç (Ch·∫ø ƒë·ªô dry-run) S·∫Ω c·∫≠p nh·∫≠t d·ªØ li·ªáu")
                    stats['updated'] += 1
    
    except Exception as e:
        print(f"L·ªói khi x·ª≠ l√Ω food_records: {e}")
        traceback.print_exc()
    
    # In th·ªëng k√™
    print("\n=== K·∫æT QU·∫¢ ===")
    print(f"T·ªïng s·ªë b·∫£n ghi ƒë√£ x·ª≠ l√Ω: {stats['total_processed']}")
    print(f"S·ªë b·∫£n ghi c·∫≠p nh·∫≠t: {stats['updated']}")
    print(f"S·ªë b·∫£n ghi b·ªè qua: {stats['skipped']}")
    print(f"S·ªë l·ªói: {stats['errors']}")
    print(f"Mode: {'Dry-run (kh√¥ng c·∫≠p nh·∫≠t th·ª±c t·∫ø)' if dry_run else 'C·∫≠p nh·∫≠t th·ª±c t·∫ø'}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='S·ª≠a l·ªói t√≠nh to√°n dinh d∆∞·ª°ng trong food_records')
    parser.add_argument('--user-id', help='ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn s·ª≠a. N·∫øu kh√¥ng c√≥, s·ª≠a t·∫•t c·∫£ ng∆∞·ªùi d√πng.')
    parser.add_argument('--apply', action='store_true', help='√Åp d·ª•ng thay ƒë·ªïi th·ª±c t·∫ø v√†o Firestore. N·∫øu kh√¥ng c√≥, ch·ªâ in ra thay ƒë·ªïi ti·ªÅm nƒÉng.')
    
    args = parser.parse_args()
    
    if init_firebase():
        fix_food_logs(user_id=args.user_id, dry_run=not args.apply)
    else:
        print("Kh√¥ng th·ªÉ kh·ªüi t·∫°o Firebase, h·ªßy thao t√°c.") 