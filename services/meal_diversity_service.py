"""
D·ªãch v·ª• ƒë·∫£m b·∫£o ƒëa d·∫°ng m√≥n ƒÉn trong k·∫ø ho·∫°ch ƒÉn u·ªëng.
"""
import random
from typing import Dict, List, Set, Any

class MealDiversityService:
    """D·ªãch v·ª• ƒë·∫£m b·∫£o ƒëa d·∫°ng m√≥n ƒÉn trong k·∫ø ho·∫°ch ƒÉn u·ªëng."""
    
    @staticmethod
    def check_meal_diversity(meal_plan: Dict[str, Any]) -> float:
        """
        Ki·ªÉm tra m·ª©c ƒë·ªô ƒëa d·∫°ng c·ªßa k·∫ø ho·∫°ch ƒÉn.
        
        Args:
            meal_plan: K·∫ø ho·∫°ch ƒÉn u·ªëng
            
        Returns:
            float: T·ª∑ l·ªá tr√πng l·∫∑p (0-1), c√†ng th·∫•p c√†ng ƒëa d·∫°ng
        """
        if not meal_plan or "weekly_plan" not in meal_plan:
            return 0.0
            
        weekly_plan = meal_plan["weekly_plan"]
        meal_names_by_type = {
            "B·ªØa s√°ng": set(),
            "B·ªØa tr∆∞a": set(),
            "B·ªØa t·ªëi": set(),
        }
        
        duplicate_count = 0
        total_meals = 0
        
        # Duy·ªát qua t·ª´ng ng√†y trong tu·∫ßn
        for day, day_plan in weekly_plan.items():
            if not day_plan or "meals" not in day_plan:
                continue
                
            # Duy·ªát qua t·ª´ng lo·∫°i b·ªØa ƒÉn
            for meal_type, meals in day_plan["meals"].items():
                if not meals or len(meals) == 0:
                    continue
                    
                # L·∫•y m√≥n ƒÉn ƒë·∫ßu ti√™n trong danh s√°ch
                meal = meals[0]
                meal_name = meal.get("name", "")
                total_meals += 1
                
                # Ki·ªÉm tra tr√πng l·∫∑p
                if meal_type in meal_names_by_type and meal_name in meal_names_by_type[meal_type]:
                    duplicate_count += 1
                elif meal_type in meal_names_by_type:
                    meal_names_by_type[meal_type].add(meal_name)
        
        # T√≠nh t·ª∑ l·ªá tr√πng l·∫∑p
        duplicate_rate = duplicate_count / total_meals if total_meals > 0 else 0
        return duplicate_rate
    
    @staticmethod
    def ensure_meal_diversity(meal_plan: Dict[str, Any]) -> Dict[str, Any]:
        """
        ƒê·∫£m b·∫£o ƒëa d·∫°ng m√≥n ƒÉn trong k·∫ø ho·∫°ch, thay th·∫ø c√°c m√≥n tr√πng l·∫∑p.
        
        Args:
            meal_plan: K·∫ø ho·∫°ch ƒÉn u·ªëng
            
        Returns:
            Dict[str, Any]: K·∫ø ho·∫°ch ƒÉn u·ªëng ƒë√£ ƒë∆∞·ª£c ƒëa d·∫°ng h√≥a
        """
        if not meal_plan or "weekly_plan" not in meal_plan:
            return meal_plan
            
        weekly_plan = meal_plan["weekly_plan"]
        meal_names_by_type = {
            "B·ªØa s√°ng": set(),
            "B·ªØa tr∆∞a": set(),
            "B·ªØa t·ªëi": set(),
        }
        
        # L∆∞u tr·ªØ t·∫•t c·∫£ m√≥n ƒÉn theo lo·∫°i b·ªØa
        all_meals_by_type = {
            "B·ªØa s√°ng": [],
            "B·ªØa tr∆∞a": [],
            "B·ªØa t·ªëi": [],
        }
        
        # Thu th·∫≠p t·∫•t c·∫£ m√≥n ƒÉn
        for day, day_plan in weekly_plan.items():
            if not day_plan or "meals" not in day_plan:
                continue
                
            for meal_type, meals in day_plan["meals"].items():
                if not meals or len(meals) == 0:
                    continue
                    
                for meal in meals:
                    if meal_type in all_meals_by_type:
                        all_meals_by_type[meal_type].append(meal)
        
        # ƒê·∫£m b·∫£o c√≥ ƒë·ªß m√≥n ƒÉn ƒëa d·∫°ng
        for meal_type, meals in all_meals_by_type.items():
            if len(meals) < 7:  # C·∫ßn √≠t nh·∫•t 7 m√≥n kh√°c nhau cho 7 ng√†y
                print(f"‚ö†Ô∏è Kh√¥ng ƒë·ªß m√≥n ƒÉn ƒëa d·∫°ng cho {meal_type}: ch·ªâ c√≥ {len(meals)} m√≥n")
        
        # Duy·ªát qua t·ª´ng ng√†y v√† thay th·∫ø m√≥n tr√πng l·∫∑p
        for day, day_plan in weekly_plan.items():
            if not day_plan or "meals" not in day_plan:
                continue
                
            for meal_type, meals in day_plan["meals"].items():
                if not meals or len(meals) == 0:
                    continue
                    
                meal = meals[0]
                meal_name = meal.get("name", "")
                
                # N·∫øu m√≥n ƒÉn ƒë√£ t·ªìn t·∫°i trong set, thay th·∫ø b·∫±ng m√≥n kh√°c
                if meal_type in meal_names_by_type and meal_name in meal_names_by_type[meal_type]:
                    # T√¨m m√≥n ƒÉn thay th·∫ø kh√¥ng tr√πng l·∫∑p
                    replacement_meal = MealDiversityService._find_replacement_meal(
                        all_meals_by_type.get(meal_type, []),
                        meal_names_by_type.get(meal_type, set())
                    )
                    
                    if replacement_meal:
                        # Thay th·∫ø m√≥n ƒÉn
                        meals[0] = replacement_meal
                        # C·∫≠p nh·∫≠t nutrition summary cho ng√†y
                        MealDiversityService._update_day_nutrition_summary(day_plan)
                        
                # Th√™m m√≥n ƒÉn v√†o set ƒë√£ s·ª≠ d·ª•ng
                if meal_type in meal_names_by_type:
                    meal_names_by_type[meal_type].add(meals[0].get("name", ""))
        
        return meal_plan
    
    @staticmethod
    def _find_replacement_meal(available_meals: List[Dict[str, Any]], used_names: Set[str]) -> Dict[str, Any]:
        """
        T√¨m m√≥n ƒÉn thay th·∫ø kh√¥ng tr√πng l·∫∑p.

        Args:
            available_meals: Danh s√°ch c√°c m√≥n ƒÉn c√≥ s·∫µn
            used_names: T√™n c√°c m√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng

        Returns:
            Dict[str, Any]: M√≥n ƒÉn thay th·∫ø ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        # üîß FIX: Enhanced diversity logic
        import time

        # L·ªçc c√°c m√≥n ƒÉn ch∆∞a ƒë∆∞·ª£c s·ª≠ d·ª•ng
        unused_meals = [meal for meal in available_meals if meal.get("name", "") not in used_names]

        if unused_meals:
            # üîß FIX: Use time-based seed for better randomness
            random.seed(int(time.time() * 1000) % 1000000)
            selected_meal = random.choice(unused_meals)
            print(f"üé≤ Selected diverse meal: {selected_meal.get('name', 'Unknown')}")
            return selected_meal
        elif available_meals:
            # N·∫øu kh√¥ng c√≥ m√≥n n√†o ch∆∞a s·ª≠ d·ª•ng, t·∫°o variation c·ªßa m√≥n hi·ªán c√≥
            print("‚ö†Ô∏è No unused meals available, creating variation...")
            base_meal = random.choice(available_meals)

            # üîß FIX: Create variation by modifying name slightly
            if base_meal and "name" in base_meal:
                original_name = base_meal["name"]
                # Add regional variation or cooking method variation
                variations = [
                    f"{original_name} Mi·ªÅn B·∫Øc",
                    f"{original_name} Mi·ªÅn Nam",
                    f"{original_name} Mi·ªÅn Trung",
                    f"{original_name} S√†i G√≤n",
                    f"{original_name} H√† N·ªôi",
                    f"{original_name} ƒê·∫∑c Bi·ªát",
                    f"{original_name} Truy·ªÅn Th·ªëng",
                    f"{original_name} C·∫£i Ti·∫øn"
                ]

                # Choose a variation that hasn't been used
                for variation in variations:
                    if variation not in used_names:
                        varied_meal = base_meal.copy()
                        varied_meal["name"] = variation
                        print(f"üé® Created variation: {variation}")
                        return varied_meal

                # If all variations used, add timestamp
                timestamp_variation = f"{original_name} ({int(time.time()) % 1000})"
                varied_meal = base_meal.copy()
                varied_meal["name"] = timestamp_variation
                print(f"üïê Created timestamp variation: {timestamp_variation}")
                return varied_meal

            return base_meal
        else:
            # Kh√¥ng c√≥ m√≥n ƒÉn n√†o
            print("‚ùå No meals available for replacement")
            return None
    
    @staticmethod
    def _update_day_nutrition_summary(day_plan: Dict[str, Any]) -> None:
        """
        C·∫≠p nh·∫≠t t·ªïng h·ª£p dinh d∆∞·ª°ng cho m·ªôt ng√†y sau khi thay ƒë·ªïi m√≥n ƒÉn.
        
        Args:
            day_plan: K·∫ø ho·∫°ch ƒÉn cho m·ªôt ng√†y
        """
        if "meals" not in day_plan:
            return
            
        # Kh·ªüi t·∫°o t·ªïng h·ª£p dinh d∆∞·ª°ng
        nutrition_summary = {
            "calories": 0,
            "protein": 0,
            "fat": 0,
            "carbs": 0,
            "fiber": 0,
            "sugar": 0,
        }
        
        # T√≠nh t·ªïng dinh d∆∞·ª°ng t·ª´ t·∫•t c·∫£ c√°c b·ªØa ƒÉn
        for meal_type, meals in day_plan["meals"].items():
            if not meals or len(meals) == 0:
                continue
                
            meal = meals[0]
            if "nutrition" not in meal:
                continue
                
            # C·ªông d·ªìn gi√° tr·ªã dinh d∆∞·ª°ng
            for nutrient, value in meal["nutrition"].items():
                if nutrient in nutrition_summary:
                    nutrition_summary[nutrient] += value
        
        # C·∫≠p nh·∫≠t t·ªïng h·ª£p dinh d∆∞·ª°ng cho ng√†y
        day_plan["nutrition_summary"] = nutrition_summary 