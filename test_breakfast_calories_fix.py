# -*- coding: utf-8 -*-
"""
Test script ƒë·ªÉ ki·ªÉm tra fix l·ªói calories b·ªØa s√°ng
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_breakfast_nutrition_calculation():
    """Test t√≠nh to√°n nutrition cho b·ªØa s√°ng"""
    try:
        from groq_integration import groq_service
        
        print("üîß Testing Breakfast Nutrition Calculation Fix...")
        print("=" * 60)
        
        # Test breakfast meal generation
        breakfast_meals = groq_service.generate_meal_suggestions(
            calories_target=414,
            protein_target=37,
            fat_target=14,
            carbs_target=50,
            meal_type="b·ªØa s√°ng",
            preferences=None,
            allergies=None,
            cuisine_style=None
        )
        
        print(f"üìä Generated {len(breakfast_meals) if breakfast_meals else 0} breakfast meals")
        
        if breakfast_meals:
            total_calories = 0
            for i, meal in enumerate(breakfast_meals, 1):
                meal_calories = meal.get('nutrition', {}).get('calories', 0)
                total_calories += meal_calories
                
                print(f"\nüçΩÔ∏è Meal {i}: {meal.get('name', 'Unknown')}")
                print(f"   üìä Calories: {meal_calories}")
                print(f"   ü•© Protein: {meal.get('nutrition', {}).get('protein', 0)}g")
                print(f"   üßà Fat: {meal.get('nutrition', {}).get('fat', 0)}g")
                print(f"   üçû Carbs: {meal.get('nutrition', {}).get('carbs', 0)}g")
                
                nutrition_source = meal.get('nutrition', {}).get('source', 'Unknown')
                print(f"   üìã Source: {nutrition_source}")
            
            print(f"\nüìä TOTAL BREAKFAST CALORIES: {total_calories}")
            print(f"üéØ TARGET CALORIES: 414")
            
            # Check if calories are reasonable
            if total_calories >= 250:
                print(f"‚úÖ PASS: Breakfast calories ({total_calories}) are reasonable for a meal")
                
                # Check if close to target
                diff_percent = abs(total_calories - 414) / 414 * 100
                if diff_percent <= 30:
                    print(f"‚úÖ PASS: Calories within 30% of target (diff: {diff_percent:.1f}%)")
                    return True
                else:
                    print(f"‚ö†Ô∏è WARNING: Calories differ from target by {diff_percent:.1f}%")
                    return True  # Still pass if calories are reasonable
            else:
                print(f"‚ùå FAIL: Breakfast calories ({total_calories}) are too low")
                return False
        else:
            print("‚ùå FAIL: No breakfast meals generated")
            return False
            
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_official_nutrition_fallback():
    """Test fallback nutrition system"""
    try:
        from groq_integration import groq_service
        
        print("\nüîß Testing Official Nutrition Fallback...")
        print("=" * 60)
        
        # Test v·ªõi c√°c m√≥n ƒÉn s√°ng kh√°c nhau
        test_dishes = [
            {"name": "B√°nh M√¨ X√≠u M√°i S√†i G√≤n", "ingredients": [{"name": "B√°nh m√¨", "amount": "1"}, {"name": "Ch·∫£ c√°", "amount": "2"}]},
            {"name": "Ch√°o G√† ƒê·∫≠u Xanh", "ingredients": [{"name": "G·∫°o", "amount": "50g"}, {"name": "Th·ªãt g√†", "amount": "80g"}]},
            {"name": "X√¥i X√©o", "ingredients": [{"name": "G·∫°o n·∫øp", "amount": "100g"}, {"name": "ƒê·∫≠u xanh", "amount": "30g"}]}
        ]
        
        all_pass = True
        
        for dish in test_dishes:
            print(f"\nüçΩÔ∏è Testing: {dish['name']}")
            
            nutrition = groq_service._get_official_nutrition(dish['name'], dish['ingredients'])
            
            if nutrition:
                calories = nutrition.get('calories', 0)
                protein = nutrition.get('protein', 0)
                source = nutrition.get('source', 'Unknown')
                
                print(f"   üìä Calories: {calories}")
                print(f"   ü•© Protein: {protein}g")
                print(f"   üìã Source: {source}")
                
                if calories >= 250:
                    print(f"   ‚úÖ PASS: Reasonable calories for breakfast")
                else:
                    print(f"   ‚ùå FAIL: Calories too low ({calories})")
                    all_pass = False
            else:
                print(f"   ‚ùå FAIL: No nutrition data returned")
                all_pass = False
        
        return all_pass
        
    except Exception as e:
        print(f"‚ùå Fallback test failed: {e}")
        return False

def test_meal_type_specific_nutrition():
    """Test nutrition theo lo·∫°i b·ªØa ƒÉn"""
    try:
        from groq_integration import groq_service
        
        print("\nüîß Testing Meal Type Specific Nutrition...")
        print("=" * 60)
        
        meal_types = [
            {"type": "b·ªØa s√°ng", "target": 414, "min_expected": 300},
            {"type": "b·ªØa tr∆∞a", "target": 662, "min_expected": 500},
            {"type": "b·ªØa t·ªëi", "target": 566, "min_expected": 400}
        ]
        
        all_pass = True
        
        for meal_info in meal_types:
            print(f"\nüçΩÔ∏è Testing: {meal_info['type']}")
            
            meals = groq_service.generate_meal_suggestions(
                calories_target=meal_info['target'],
                protein_target=30,
                fat_target=15,
                carbs_target=50,
                meal_type=meal_info['type']
            )
            
            if meals:
                total_calories = sum(meal.get('nutrition', {}).get('calories', 0) for meal in meals)
                print(f"   üìä Total calories: {total_calories}")
                print(f"   üéØ Target: {meal_info['target']}")
                print(f"   üìè Min expected: {meal_info['min_expected']}")
                
                if total_calories >= meal_info['min_expected']:
                    print(f"   ‚úÖ PASS: Calories above minimum threshold")
                else:
                    print(f"   ‚ùå FAIL: Calories below minimum ({total_calories} < {meal_info['min_expected']})")
                    all_pass = False
            else:
                print(f"   ‚ùå FAIL: No meals generated for {meal_info['type']}")
                all_pass = False
        
        return all_pass
        
    except Exception as e:
        print(f"‚ùå Meal type test failed: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ TESTING BREAKFAST CALORIES FIX")
    print("=" * 80)
    
    # Run tests
    test1 = test_breakfast_nutrition_calculation()
    test2 = test_official_nutrition_fallback()
    test3 = test_meal_type_specific_nutrition()
    
    print("\n" + "=" * 80)
    print("üìä TEST RESULTS:")
    print(f"‚úÖ Breakfast Nutrition Calculation: {'PASS' if test1 else 'FAIL'}")
    print(f"‚úÖ Official Nutrition Fallback: {'PASS' if test2 else 'FAIL'}")
    print(f"‚úÖ Meal Type Specific Nutrition: {'PASS' if test3 else 'FAIL'}")
    
    if all([test1, test2, test3]):
        print("\nüéâ ALL TESTS PASSED!")
        print("üîß Breakfast calories issue has been fixed!")
        print("üìä Nutrition calculation now provides realistic values!")
    else:
        print("\n‚ùå Some tests failed - breakfast calories issue may persist")
        
    print("\nüîß FIXES IMPLEMENTED:")
    fixes = [
        "‚úÖ Minimum calories enforcement (250+ for breakfast)",
        "‚úÖ Meal-type based nutrition fallbacks",
        "‚úÖ Proportional scaling for low nutrition values",
        "‚úÖ Emergency fallback nutrition system",
        "‚úÖ Enhanced error handling and logging"
    ]
    
    for fix in fixes:
        print(f"  {fix}")
