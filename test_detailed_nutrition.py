#!/usr/bin/env python3
"""
Test script cho t√≠nh nƒÉng l·∫•y nutrition t·ª´ t√™n m√≥n chi ti·∫øt
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from groq_integration import GroqService
import json

def test_detailed_nutrition_extraction():
    """Test t√≠nh nƒÉng l·∫•y nutrition t·ª´ t√™n m√≥n chi ti·∫øt"""
    print("üß™ Testing Detailed Nutrition Extraction")
    print("=" * 60)
    
    # Initialize Groq service
    groq_service = GroqService()
    
    # Test cases v·ªõi t√™n m√≥n chi ti·∫øt
    test_dishes = [
        "C∆°m g·∫°o l·ª©t v·ªõi c√° h·∫•p v√† rau lu·ªôc",
        "B√∫n t∆∞∆°i v·ªõi g√† n∆∞·ªõng m·∫≠t ong v√† rau th∆°m", 
        "Ph·ªü t∆∞∆°i v·ªõi th·ªãt b√≤ t√°i v√† rau s·ªëng",
        "M√¨ tr·ª©ng v·ªõi t√¥m n∆∞·ªõng v√† m∆∞·ªõp x√†o",
        "Ch√°o g·∫°o t·∫ª v·ªõi g√† x√†o s·∫£ ·ªõt v√† rau s·ªëng",
        "B√°nh m√¨ t∆∞∆°i v·ªõi ch·∫£ c√° v√† d∆∞a chua",
        "X√¥i d·∫ªo v·ªõi th·ªãt n∆∞·ªõng than v√† d∆∞a chua"
    ]
    
    for i, dish_name in enumerate(test_dishes, 1):
        print(f"\nüçΩÔ∏è Test Case {i}: {dish_name}")
        print("-" * 50)
        
        try:
            # Test extract simple dish name
            simple_name = groq_service._extract_simple_dish_name(dish_name)
            print(f"üìù Simple name: {simple_name}")
            
            # Test parse detailed components
            components = groq_service._parse_detailed_dish_components(dish_name)
            print(f"ü•ò Components ({len(components)} items):")
            for comp in components:
                print(f"   - {comp['name']}: {comp['amount']}")
            
            # Test get official nutrition
            nutrition = groq_service._get_official_nutrition(dish_name, components)
            print(f"üìä Nutrition:")
            print(f"   - Calories: {nutrition['calories']}")
            print(f"   - Protein: {nutrition['protein']}g")
            print(f"   - Fat: {nutrition['fat']}g")
            print(f"   - Carbs: {nutrition['carbs']}g")
            print(f"   - Source: {nutrition['source']}")
            
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
            import traceback
            traceback.print_exc()

def test_simple_vs_detailed_nutrition():
    """So s√°nh nutrition gi·ªØa t√™n m√≥n ƒë∆°n gi·∫£n v√† chi ti·∫øt"""
    print("\nüß™ Testing Simple vs Detailed Nutrition Comparison")
    print("=" * 60)
    
    groq_service = GroqService()
    
    test_pairs = [
        ("C∆°m G√†", "C∆°m g·∫°o l·ª©t v·ªõi g√† n∆∞·ªõng m·∫≠t ong v√† rau lu·ªôc"),
        ("B√∫n B√≤", "B√∫n t∆∞∆°i v·ªõi th·ªãt b√≤ n∆∞·ªõng l√° l·ªët v√† rau th∆°m"),
        ("Ph·ªü G√†", "Ph·ªü t∆∞∆°i v·ªõi g√† lu·ªôc v√† rau s·ªëng"),
        ("Ch√°o C√°", "Ch√°o g·∫°o t·∫ª v·ªõi c√° h·∫•p v√† rau mu·ªëng lu·ªôc")
    ]
    
    for simple_name, detailed_name in test_pairs:
        print(f"\nüîç Comparing: '{simple_name}' vs '{detailed_name}'")
        print("-" * 60)
        
        try:
            # Get nutrition for simple name
            simple_nutrition = groq_service._get_official_nutrition(simple_name, [])
            print(f"üìä Simple ({simple_name}):")
            print(f"   Calories: {simple_nutrition['calories']}, Protein: {simple_nutrition['protein']}g")
            print(f"   Source: {simple_nutrition['source']}")
            
            # Get nutrition for detailed name
            detailed_nutrition = groq_service._get_official_nutrition(detailed_name, [])
            print(f"üìä Detailed ({detailed_name}):")
            print(f"   Calories: {detailed_nutrition['calories']}, Protein: {detailed_nutrition['protein']}g")
            print(f"   Source: {detailed_nutrition['source']}")
            
            # Compare
            calorie_diff = detailed_nutrition['calories'] - simple_nutrition['calories']
            protein_diff = detailed_nutrition['protein'] - simple_nutrition['protein']
            
            print(f"üìà Difference:")
            print(f"   Calories: {calorie_diff:+.1f} ({calorie_diff/simple_nutrition['calories']*100:+.1f}%)")
            print(f"   Protein: {protein_diff:+.1f}g ({protein_diff/simple_nutrition['protein']*100:+.1f}%)")
            
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")

def test_ingredient_parsing_accuracy():
    """Test ƒë·ªô ch√≠nh x√°c c·ªßa vi·ªác parse ingredients"""
    print("\nüß™ Testing Ingredient Parsing Accuracy")
    print("=" * 60)
    
    groq_service = GroqService()
    
    test_cases = [
        {
            "dish": "C∆°m g·∫°o l·ª©t v·ªõi th·ªãt b√≤ n∆∞·ªõng v√† rau mu·ªëng x√†o",
            "expected_ingredients": ["g·∫°o t·∫ª", "th·ªãt b√≤", "rau mu·ªëng", "n∆∞·ªõc m·∫Øm", "d·∫ßu ƒÉn"]
        },
        {
            "dish": "B√∫n t∆∞∆°i v·ªõi t√¥m h·∫•p v√† c·∫£i th·∫£o lu·ªôc",
            "expected_ingredients": ["b√∫n t∆∞∆°i", "t√¥m s√∫", "c·∫£i b·∫Øp", "n∆∞·ªõc m·∫Øm", "d·∫ßu ƒÉn"]
        },
        {
            "dish": "Ph·ªü v·ªõi g√† lu·ªôc v√† rau th∆°m",
            "expected_ingredients": ["b√°nh ph·ªü", "th·ªãt g√†", "rau mu·ªëng", "n∆∞·ªõc m·∫Øm", "d·∫ßu ƒÉn"]
        }
    ]
    
    for i, test_case in enumerate(test_cases, 1):
        dish_name = test_case["dish"]
        expected = test_case["expected_ingredients"]
        
        print(f"\nüçΩÔ∏è Test Case {i}: {dish_name}")
        print(f"üéØ Expected ingredients: {expected}")
        
        try:
            parsed_ingredients = groq_service._parse_detailed_dish_components(dish_name)
            parsed_names = [ing["name"] for ing in parsed_ingredients]
            
            print(f"üîç Parsed ingredients: {parsed_names}")
            
            # Check accuracy
            matches = 0
            for exp_ing in expected:
                if any(exp_ing in parsed_name for parsed_name in parsed_names):
                    matches += 1
                    print(f"   ‚úÖ Found: {exp_ing}")
                else:
                    print(f"   ‚ùå Missing: {exp_ing}")
            
            accuracy = (matches / len(expected)) * 100
            print(f"üìä Accuracy: {matches}/{len(expected)} ({accuracy:.1f}%)")
            
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")

def test_nutrition_database_coverage():
    """Test coverage c·ªßa nutrition database"""
    print("\nüß™ Testing Nutrition Database Coverage")
    print("=" * 60)
    
    from vietnamese_nutrition_database import VIETNAMESE_NUTRITION_DATABASE, VIETNAMESE_DISHES_NUTRITION
    
    print(f"üìä Database Statistics:")
    print(f"   Ingredients: {len(VIETNAMESE_NUTRITION_DATABASE)} items")
    print(f"   Complete dishes: {len(VIETNAMESE_DISHES_NUTRITION)} items")
    
    print(f"\nü•ò Sample ingredients:")
    for i, (name, data) in enumerate(list(VIETNAMESE_NUTRITION_DATABASE.items())[:10], 1):
        print(f"   {i:2d}. {name}: {data['calories']} kcal, {data['protein']}g protein")
    
    print(f"\nüçΩÔ∏è Sample complete dishes:")
    for i, (name, data) in enumerate(list(VIETNAMESE_DISHES_NUTRITION.items())[:5], 1):
        print(f"   {i}. {name}: {data['calories']} kcal, {data['protein']}g protein")

def test_meal_generation_with_detailed_nutrition():
    """Test meal generation v·ªõi detailed nutrition"""
    print("\nüß™ Testing Meal Generation with Detailed Nutrition")
    print("=" * 60)
    
    groq_service = GroqService()
    
    # Test meal generation
    test_params = {
        "meal_type": "lunch",
        "calories_target": 500,
        "protein_target": 30,
        "fat_target": 20,
        "carbs_target": 60,
        "preferences": [],
        "allergies": []
    }
    
    print(f"üçΩÔ∏è Generating meals with detailed nutrition")
    print(f"üìä Targets: {test_params['calories_target']} kcal, {test_params['protein_target']}g protein")
    
    try:
        meals = groq_service.generate_meal_suggestions(
            meal_type=test_params["meal_type"],
            calories_target=test_params["calories_target"],
            protein_target=test_params["protein_target"],
            fat_target=test_params["fat_target"],
            carbs_target=test_params["carbs_target"],
            preferences=test_params["preferences"],
            allergies=test_params["allergies"]
        )
        
        if meals:
            print(f"‚úÖ Generated {len(meals)} meals with detailed nutrition:")
            total_calories = 0
            total_protein = 0
            
            for i, meal in enumerate(meals, 1):
                nutrition = meal.get('nutrition', {})
                calories = nutrition.get('calories', 0)
                protein = nutrition.get('protein', 0)
                source = nutrition.get('source', 'Unknown')
                
                total_calories += calories
                total_protein += protein
                
                print(f"\n   {i}. {meal['name']}")
                print(f"      üìä {calories} kcal, {protein}g protein")
                print(f"      üìù Source: {source}")
                print(f"      ü•ò Ingredients: {len(meal.get('ingredients', []))} items")
            
            print(f"\nüìä Total nutrition:")
            print(f"   Calories: {total_calories} / {test_params['calories_target']} (target)")
            print(f"   Protein: {total_protein:.1f}g / {test_params['protein_target']}g (target)")
            
            accuracy_calories = (total_calories / test_params['calories_target']) * 100
            accuracy_protein = (total_protein / test_params['protein_target']) * 100
            
            print(f"üìà Accuracy:")
            print(f"   Calories: {accuracy_calories:.1f}%")
            print(f"   Protein: {accuracy_protein:.1f}%")
        else:
            print("‚ùå No meals generated")
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ Starting Detailed Nutrition Tests")
    print("=" * 70)
    
    try:
        # Run all tests
        test_detailed_nutrition_extraction()
        test_simple_vs_detailed_nutrition()
        test_ingredient_parsing_accuracy()
        test_nutrition_database_coverage()
        test_meal_generation_with_detailed_nutrition()
        
        print("\nüéâ All detailed nutrition tests completed!")
        
    except Exception as e:
        print(f"\nüí• Test suite failed: {str(e)}")
        import traceback
        traceback.print_exc()
