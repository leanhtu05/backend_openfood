# -*- coding: utf-8 -*-
"""
Test script ƒë·ªÉ ki·ªÉm tra Vietnamese Dish Generator
T·∫°o 10 m√≥n ƒÉn m·∫´u ƒë·ªÉ xem ch·∫•t l∆∞·ª£ng
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from services.vietnamese_dish_generator import vietnamese_dish_generator
    print("‚úÖ Successfully imported vietnamese_dish_generator")
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üìÅ Current directory:", os.getcwd())
    print("üìÅ Python path:", sys.path)
    sys.exit(1)

import json

def test_dish_generation():
    """Test t·∫°o m√≥n ƒÉn"""
    print("üîß Testing Vietnamese Dish Generator...")
    print("=" * 60)
    
    # T·∫°o 10 m√≥n ƒÉn m·∫´u
    sample_dishes = vietnamese_dish_generator.generate_multiple_dishes(10)
    
    for i, dish in enumerate(sample_dishes, 1):
        print(f"\nüìã M√ìN {i}: {dish['name']}")
        print(f"üåç Mi·ªÅn: {dish['region']}")
        print(f"üçΩÔ∏è B·ªØa: {dish['meal_type']}")
        print(f"‚è∞ Th·ªùi gian: {dish['cooking_time']}")
        print(f"üìä Dinh d∆∞·ª°ng: {dish['nutrition']['calories']} kcal, "
              f"{dish['nutrition']['protein']}g protein, "
              f"{dish['nutrition']['fat']}g fat, "
              f"{dish['nutrition']['carbs']}g carbs")
        
        print("ü•ò Nguy√™n li·ªáu:")
        for ingredient in dish['ingredients']:
            print(f"  - {ingredient['name']}: {ingredient['amount']}g")
        
        print("üë®‚Äçüç≥ C√°ch l√†m:")
        for step in dish['preparation']:
            print(f"  ‚Ä¢ {step}")
        
        print("-" * 60)
    
    return sample_dishes

def analyze_nutrition_accuracy(dishes):
    """Ph√¢n t√≠ch ƒë·ªô ch√≠nh x√°c dinh d∆∞·ª°ng"""
    print("\nüîç PH√ÇN T√çCH ƒê·ªò CH√çNH X√ÅC DINH D∆Ø·ª†NG:")
    print("=" * 60)
    
    total_dishes = len(dishes)
    valid_nutrition = 0
    
    for dish in dishes:
        nutrition = dish['nutrition']
        calories = nutrition['calories']
        protein = nutrition['protein']
        fat = nutrition['fat']
        carbs = nutrition['carbs']
        
        # Ki·ªÉm tra t√≠nh h·ª£p l√Ω
        calculated_calories = (protein * 4) + (fat * 9) + (carbs * 4)
        calorie_diff = abs(calculated_calories - calories) / calories if calories > 0 else 1
        
        if calorie_diff < 0.3:  # Sai l·ªách < 30%
            valid_nutrition += 1
        else:
            print(f"‚ö†Ô∏è {dish['name']}: Sai l·ªách calories {calorie_diff:.1%}")
    
    accuracy = (valid_nutrition / total_dishes) * 100
    print(f"‚úÖ ƒê·ªô ch√≠nh x√°c dinh d∆∞·ª°ng: {accuracy:.1f}% ({valid_nutrition}/{total_dishes})")
    
    return accuracy

def analyze_diversity(dishes):
    """Ph√¢n t√≠ch ƒë·ªô ƒëa d·∫°ng"""
    print("\nüåà PH√ÇN T√çCH ƒê·ªò ƒêA D·∫†NG:")
    print("=" * 60)
    
    # ƒê·∫øm theo mi·ªÅn
    regions = {}
    meal_types = {}
    proteins = {}
    
    for dish in dishes:
        region = dish['region']
        meal_type = dish['meal_type']
        
        regions[region] = regions.get(region, 0) + 1
        meal_types[meal_type] = meal_types.get(meal_type, 0) + 1
        
        # ƒê·∫øm protein
        for ingredient in dish['ingredients']:
            name = ingredient['name']
            if any(keyword in name for keyword in ['th·ªãt', 'c√°', 't√¥m', 'g√†', 'b√≤', 'heo']):
                proteins[name] = proteins.get(name, 0) + 1
    
    print("üåç Ph√¢n b·ªë theo mi·ªÅn:")
    for region, count in regions.items():
        print(f"  {region}: {count} m√≥n")
    
    print("\nüçΩÔ∏è Ph√¢n b·ªë theo b·ªØa:")
    for meal_type, count in meal_types.items():
        print(f"  {meal_type}: {count} m√≥n")
    
    print("\nü•© ƒêa d·∫°ng protein:")
    for protein, count in sorted(proteins.items(), key=lambda x: x[1], reverse=True):
        print(f"  {protein}: {count} l·∫ßn")
    
    diversity_score = len(set(dish['name'] for dish in dishes)) / len(dishes) * 100
    print(f"\nüìä ƒêi·ªÉm ƒëa d·∫°ng: {diversity_score:.1f}% (t√™n m√≥n kh√¥ng tr√πng)")
    
    return diversity_score

if __name__ == "__main__":
    # Test t·∫°o m√≥n ƒÉn
    dishes = test_dish_generation()
    
    # Ph√¢n t√≠ch
    nutrition_accuracy = analyze_nutrition_accuracy(dishes)
    diversity_score = analyze_diversity(dishes)
    
    print("\n" + "=" * 60)
    print("üìä K·∫æT QU·∫¢ T·ªîNG QUAN:")
    print(f"‚úÖ ƒê·ªô ch√≠nh x√°c dinh d∆∞·ª°ng: {nutrition_accuracy:.1f}%")
    print(f"üåà ƒê·ªô ƒëa d·∫°ng m√≥n ƒÉn: {diversity_score:.1f}%")
    
    if nutrition_accuracy > 80 and diversity_score > 80:
        print("üéâ CH·∫§T L∆Ø·ª¢NG T·ªêT - C√≥ th·ªÉ t·∫°o 300+ m√≥n ƒÉn!")
    elif nutrition_accuracy > 60 and diversity_score > 60:
        print("‚ö†Ô∏è CH·∫§T L∆Ø·ª¢NG TRUNG B√åNH - C·∫ßn c·∫£i thi·ªán")
    else:
        print("‚ùå CH·∫§T L∆Ø·ª¢NG TH·∫§P - C·∫ßn s·ª≠a ƒë·ªïi thu·∫≠t to√°n")
