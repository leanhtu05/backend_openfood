#!/usr/bin/env python3
"""
Test script for enhanced Groq JSON parsing
Ki·ªÉm tra c√°c c·∫£i ti·∫øn trong vi·ªác x·ª≠ l√Ω JSON t·ª´ Groq API
"""

import json
import re
from groq_integration_direct import GroqService  # Fixed version

def test_json_parsing():
    """Test c√°c tr∆∞·ªùng h·ª£p JSON parsing kh√°c nhau"""
    
    # Kh·ªüi t·∫°o service
    groq_service = GroqService()
    
    # Test cases v·ªõi c√°c l·ªói JSON ph·ªï bi·∫øn
    test_cases = [
        {
            "name": "Missing name key - Case 1",
            "input": '''[{ "B√°nh M√¨ Chay", "description": "M√≥n b√°nh m√¨ chay ngon", "ingredients": [{"name": "B√°nh m√¨", "amount": "1 ·ªï"}], "nutrition": {"calories": 300, "protein": 15, "fat": 8, "carbs": 45} }]''',
            "expected_dishes": ["B√°nh M√¨ Chay"]
        },
        {
            "name": "Missing name key - Case 2", 
            "input": '''[{ "C∆°m T·∫•m S∆∞·ªùn", "description": "C∆°m t·∫•m s∆∞·ªùn n∆∞·ªõng", "ingredients": [{"name": "C∆°m t·∫•m", "amount": "1 ƒëƒ©a"}], "nutrition": {"calories": 500, "protein": 25, "fat": 15, "carbs": 60} }]''',
            "expected_dishes": ["C∆°m T·∫•m S∆∞·ªùn"]
        },
        {
            "name": "Valid JSON",
            "input": '''[{"name": "Ph·ªü G√†", "description": "Ph·ªü g√† truy·ªÅn th·ªëng", "ingredients": [{"name": "B√°nh ph·ªü", "amount": "200g"}], "preparation": ["Lu·ªôc g√†", "N·∫•u n∆∞·ªõc d√πng"], "nutrition": {"calories": 400, "protein": 30, "fat": 10, "carbs": 50}, "preparation_time": "45 ph√∫t", "health_benefits": "Gi√†u protein"}]''',
            "expected_dishes": ["Ph·ªü G√†"]
        },
        {
            "name": "Malformed JSON with missing fields",
            "input": '''[{"name": "B√∫n B√≤ Hu·∫ø", "description": "B√∫n b√≤ Hu·∫ø cay n·ªìng", "ingredients": [{"name": "B√∫n", "amount": "200g"}]}]''',
            "expected_dishes": ["B√∫n B√≤ Hu·∫ø"]
        },
        {
            "name": "Text response (no JSON)",
            "input": '''T√¥i g·ª£i √Ω m√≥n "Ch√°o G√†" v·ªõi c√°c nguy√™n li·ªáu: g·∫°o, th·ªãt g√†, h√†nh l√°. M√≥n n√†y c√≥ kho·∫£ng 250 calories v√† r·∫•t b·ªï d∆∞·ª°ng.''',
            "expected_dishes": ["Ch√°o G√†"]
        }
    ]
    
    print("üß™ TESTING ENHANCED GROQ JSON PARSING")
    print("=" * 50)
    
    success_count = 0
    total_count = len(test_cases)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüìã Test {i}: {test_case['name']}")
        print(f"Input: {test_case['input'][:100]}...")
        
        try:
            # Test JSON extraction
            result = groq_service._extract_json_from_response(test_case['input'])
            
            if result and len(result) > 0:
                extracted_dishes = [meal.get('name', 'Unknown') for meal in result]
                print(f"‚úÖ Extracted dishes: {extracted_dishes}")
                
                # Check if expected dishes are found
                found_expected = any(expected in extracted_dishes for expected in test_case['expected_dishes'])
                if found_expected:
                    print(f"‚úÖ SUCCESS: Found expected dish(es)")
                    success_count += 1
                else:
                    print(f"‚ö†Ô∏è PARTIAL: Extracted dishes but not expected ones")
                    print(f"   Expected: {test_case['expected_dishes']}")
                    print(f"   Got: {extracted_dishes}")
            else:
                print(f"‚ùå FAILED: No dishes extracted")
                
        except Exception as e:
            print(f"‚ùå ERROR: {e}")
    
    print(f"\nüìä RESULTS: {success_count}/{total_count} tests passed")
    print(f"Success rate: {(success_count/total_count)*100:.1f}%")

def test_json_fixing():
    """Test JSON fixing capabilities"""
    
    groq_service = GroqService()
    
    malformed_examples = [
        '{ "B√°nh M√¨ Chay", "description": "M√≥n chay ngon" }',
        '[{ "C∆°m T·∫•m", "description": "C∆°m t·∫•m s∆∞·ªùn", "ingredients": [{"name": "C∆°m", "amount": "1 ƒëƒ©a"}] }]',
        '{"name": "Ph·ªü G√†", "description": "Ph·ªü g√† ngon", "ingredients": [{"name": "B√°nh ph·ªü", "amount": "200g"}',  # Missing closing bracket
    ]
    
    print("\nüîß TESTING JSON FIXING")
    print("=" * 30)
    
    for i, malformed in enumerate(malformed_examples, 1):
        print(f"\nTest {i}: {malformed}")
        try:
            fixed = groq_service._fix_malformed_json(malformed)
            print(f"Fixed: {fixed}")
            
            # Try to parse fixed JSON
            parsed = json.loads(fixed)
            print(f"‚úÖ Successfully parsed fixed JSON")
        except Exception as e:
            print(f"‚ùå Still invalid after fixing: {e}")

def test_meal_generation():
    """Test actual meal generation with enhanced parsing"""
    
    print("\nüçΩÔ∏è TESTING MEAL GENERATION")
    print("=" * 35)
    
    groq_service = GroqService()
    
    # Test with different meal types
    test_params = [
        {
            "meal_type": "b·ªØa s√°ng",
            "calories": 400,
            "protein": 20,
            "fat": 15,
            "carbs": 50
        },
        {
            "meal_type": "b·ªØa tr∆∞a", 
            "calories": 600,
            "protein": 30,
            "fat": 20,
            "carbs": 70
        }
    ]
    
    for params in test_params:
        print(f"\nüîç Testing {params['meal_type']} generation...")
        
        try:
            meals = groq_service.generate_meal_suggestions(
                calories_target=params['calories'],
                protein_target=params['protein'],
                fat_target=params['fat'],
                carbs_target=params['carbs'],
                meal_type=params['meal_type'],
                use_ai=True  # Force AI usage for testing
            )
            
            if meals and len(meals) > 0:
                print(f"‚úÖ Generated {len(meals)} meals:")
                for meal in meals:
                    print(f"   - {meal.get('name', 'Unknown')}")
                    print(f"     Calories: {meal.get('nutrition', {}).get('calories', 'N/A')}")
            else:
                print(f"‚ùå No meals generated")
                
        except Exception as e:
            print(f"‚ùå Error generating meals: {e}")

if __name__ == "__main__":
    print("üöÄ ENHANCED GROQ INTEGRATION TESTING")
    print("=" * 50)
    
    # Run all tests
    test_json_parsing()
    test_json_fixing() 
    test_meal_generation()
    
    print("\n‚úÖ Testing completed!")
