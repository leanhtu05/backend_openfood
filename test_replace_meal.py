import requests
import json
from typing import Dict, Any, List, Optional

# Th√¥ng tin ng∆∞·ªùi d√πng c·∫ßn ki·ªÉm tra
USER_ID = "49DhdmJHFAY40eEgaPNEJqGdDQK2"
SERVER_URL = "http://localhost:8000"  # URL c·ªßa backend server

def test_replace_meal():
    """
    Ki·ªÉm tra endpoint /api/meal-plan/replace-meal
    """
    print(f"\n=== KI·ªÇM TRA REPLACE MEAL CHO USER {USER_ID} ===\n")
    
    # T·∫°o request body
    request_data = {
        "user_id": USER_ID,
        "day_of_week": "Ch·ªß Nh·∫≠t",
        "meal_type": "dinner",  # dinner, lunch, breakfast
        "calories_target": 2468,
        "protein_target": 185,
        "fat_target": 82,
        "carbs_target": 247,
        "use_ai": True,
        "diet_restrictions": [],
        "health_conditions": [],
        "diet_preference": ""
    }
    
    # Th√™m headers v·ªõi token x√°c th·ª±c - s·ª≠ d·ª•ng token test mode ƒë·ªÉ bypass x√°c th·ª±c
    headers = {
        "Content-Type": "application/json",
        "Authorization": "Bearer test_mode_token"  # Token ƒë·∫∑c bi·ªát ƒë·ªÉ bypass authentication
    }
    
    # G·ª≠i request t·ªõi API
    url = f"{SERVER_URL}/api/meal-plan/replace-meal"
    print(f"üì¶ D·ªØ li·ªáu g·ª≠i ƒëi: {json.dumps(request_data)}")
    
    try:
        response = requests.post(url, json=request_data, headers=headers)
        
        # In th√¥ng tin response
        print(f"üì¶ Response: {response.status_code} - {response.text}")
        
        if response.status_code == 200:
            # Ph√¢n t√≠ch d·ªØ li·ªáu tr·∫£ v·ªÅ
            data = response.json()
            
            # Ki·ªÉm tra xem c√≥ ƒë√∫ng ng√†y v√† lo·∫°i b·ªØa ƒÉn kh√¥ng
            if data.get("day_of_week") == request_data["day_of_week"] and data.get("meal_type") == request_data["meal_type"]:
                print(f"‚úÖ ƒê√£ thay th·∫ø th√†nh c√¥ng {request_data['meal_type']} cho {request_data['day_of_week']}")
                
                # Ki·ªÉm tra xem meal c√≥ ƒë√∫ng format kh√¥ng
                meal = data.get("meal", {})
                dishes = meal.get("dishes", [])
                
                if dishes:
                    print(f"‚úÖ B·ªØa ƒÉn m·ªõi c√≥ {len(dishes)} m√≥n")
                    
                    # Ki·ªÉm tra tr∆∞·ªùng preparation c·ªßa t·ª´ng m√≥n
                    for i, dish in enumerate(dishes):
                        print(f"M√≥n {i+1}: {dish.get('name')}")
                        
                        # In ra ki·ªÉu d·ªØ li·ªáu c·ªßa preparation
                        preparation = dish.get("preparation", "")
                        print(f"- Preparation (type: {type(preparation).__name__}): {preparation[:50]}...")
                        
                        # Ki·ªÉm tra xem preparation c√≥ ph·∫£i l√† chu·ªói kh√¥ng
                        if isinstance(preparation, str):
                            print(f"‚úÖ Preparation l√† chu·ªói")
                        elif isinstance(preparation, list):
                            print(f"‚ùå Preparation l√† danh s√°ch: {preparation}")
                        else:
                            print(f"‚ùì Preparation c√≥ ki·ªÉu d·ªØ li·ªáu kh√¥ng x√°c ƒë·ªãnh: {type(preparation).__name__}")
                else:
                    print(f"‚ùå Kh√¥ng c√≥ m√≥n ƒÉn n√†o trong b·ªØa ƒÉn m·ªõi")
            else:
                print(f"‚ùå D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng kh·ªõp v·ªõi y√™u c·∫ßu:")
                print(f"- Y√™u c·∫ßu: {request_data['day_of_week']} / {request_data['meal_type']}")
                print(f"- Nh·∫≠n ƒë∆∞·ª£c: {data.get('day_of_week')} / {data.get('meal_type')}")
        else:
            print(f"‚ùå L·ªói khi g·ªçi API: {response.status_code} - {response.text}")
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")

# Ch·∫°y ki·ªÉm tra
if __name__ == "__main__":
    test_replace_meal() 