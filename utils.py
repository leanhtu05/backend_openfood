import random
from typing import List, Dict, Tuple
from models import Ingredient, NutritionInfo, Dish, Meal, DayMealPlan

# Vietnamese days of the week
DAYS_OF_WEEK = ["Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7", "Ch·ªß Nh·∫≠t"]

# üîß FIX: Vietnamese recipes data with real nutrition from Vietnamese database
SAMPLE_RECIPES = {
    "breakfast": [
        {
            "name": "B√°nh m√¨ th·ªãt n∆∞·ªõng",
            "ingredients": [
                {"name": "b√°nh m√¨", "amount": "1 ·ªï (150g)"},
                {"name": "th·ªãt heo", "amount": "80g"},
                {"name": "rau th∆°m", "amount": "30g"},
                {"name": "d∆∞a chu·ªôt", "amount": "50g"}
            ],
            "preparation": "N∆∞·ªõng th·ªãt heo v·ªõi gia v·ªã. R·∫°ch b√°nh m√¨, nh·ªìi th·ªãt n∆∞·ªõng, rau th∆°m v√† d∆∞a chu·ªôt.",
            "nutrition": {
                "calories": 420,
                "protein": 25,
                "fat": 15,
                "carbs": 45
            }
        },
        {
            "name": "Ph·ªü b√≤",
            "ingredients": [
                {"name": "b√°nh ph·ªü", "amount": "200g"},
                {"name": "th·ªãt b√≤", "amount": "120g"},
                {"name": "h√†nh l√°", "amount": "20g"},
                {"name": "gi√° ƒë·ªó", "amount": "50g"},
                {"name": "n∆∞·ªõc d√πng", "amount": "500ml"}
            ],
            "preparation": "N·∫•u n∆∞·ªõc d√πng b√≤ th∆°m. Tr·ª•ng b√°nh ph·ªü, cho v√†o t√¥ c√πng th·ªãt b√≤ th√°i m·ªèng, h√†nh l√°, gi√° ƒë·ªó. Chan n∆∞·ªõc d√πng n√≥ng.",
            "nutrition": {
                "calories": 420,
                "protein": 25.3,
                "fat": 12.2,
                "carbs": 55
            }
        },
        {
            "name": "B√°nh cu·ªën",
            "ingredients": [
                {"name": "b√°nh cu·ªën", "amount": "4 c√°i"},
                {"name": "th·ªãt heo", "amount": "80g"},
                {"name": "n·∫•m m√®o", "amount": "30g"},
                {"name": "h√†nh l√°", "amount": "15g"},
                {"name": "n∆∞·ªõc m·∫Øm pha", "amount": "50ml"}
            ],
            "preparation": "X√†o th·ªãt heo v·ªõi n·∫•m m√®o. Cu·ªën b√°nh v·ªõi nh√¢n th·ªãt. ƒÇn k√®m n∆∞·ªõc m·∫Øm pha v√† rau th∆°m.",
            "nutrition": {
                "calories": 280,
                "protein": 18,
                "fat": 8,
                "carbs": 35
            }
        },
        {
            "name": "Ch√°o g√†",
            "ingredients": [
                {"name": "g·∫°o t·∫ª", "amount": "80g"},
                {"name": "th·ªãt g√†", "amount": "100g"},
                {"name": "h√†nh l√°", "amount": "15g"},
                {"name": "g·ª´ng", "amount": "10g"},
                {"name": "n∆∞·ªõc d√πng", "amount": "600ml"}
            ],
            "preparation": "N·∫•u ch√°o g·∫°o v·ªõi n∆∞·ªõc d√πng g√†. Th√™m th·ªãt g√† x√© nh·ªè, g·ª´ng th√°i s·ª£i. R·∫Øc h√†nh l√° khi ƒÉn.",
            "nutrition": {
                "calories": 320,
                "protein": 22,
                "fat": 8,
                "carbs": 42
            }
        },
        {
            "name": "B√∫n b√≤ Hu·∫ø",
            "ingredients": [
                {"name": "b√∫n", "amount": "200g"},
                {"name": "th·ªãt b√≤", "amount": "100g"},
                {"name": "ch·∫£ cua", "amount": "50g"},
                {"name": "h√†nh l√°", "amount": "20g"},
                {"name": "n∆∞·ªõc d√πng", "amount": "500ml"}
            ],
            "preparation": "N·∫•u n∆∞·ªõc d√πng b√≤ cay. Tr·ª•ng b√∫n, cho v√†o t√¥ c√πng th·ªãt b√≤, ch·∫£ cua. Chan n∆∞·ªõc d√πng v√† r·∫Øc h√†nh l√°.",
            "nutrition": {
                "calories": 450,
                "protein": 28,
                "fat": 14,
                "carbs": 58
            }
        },
        {
            "name": "X√¥i g√†",
            "ingredients": [
                {"name": "g·∫°o n·∫øp", "amount": "150g"},
                {"name": "th·ªãt g√†", "amount": "80g"},
                {"name": "h√†nh phi", "amount": "15g"},
                {"name": "n∆∞·ªõc m·∫Øm", "amount": "10ml"},
                {"name": "ƒë·∫≠u xanh", "amount": "30g"}
            ],
            "preparation": "N·∫•u x√¥i n·∫øp v·ªõi ƒë·∫≠u xanh. Lu·ªôc g√† x√© nh·ªè, tr·ªôn v·ªõi h√†nh phi. ƒÇn x√¥i k√®m g√†.",
            "nutrition": {
                "calories": 380,
                "protein": 20,
                "fat": 10,
                "carbs": 55
            }
        },
        {
            "name": "S·ªØa chua Hy L·∫°p v·ªõi h·∫°t v√† m·∫≠t ong",
            "ingredients": [
                {"name": "s·ªØa chua Hy L·∫°p", "amount": "200g"},
                {"name": "h·∫°t b√≠ ng√¥", "amount": "15g"},
                {"name": "h·∫°t h∆∞·ªõng d∆∞∆°ng", "amount": "15g"},
                {"name": "m·∫≠t ong", "amount": "10g"}
            ],
            "preparation": "Cho s·ªØa chua v√†o b√°t, r·∫Øc h·∫°t b√≠ ng√¥ v√† h·∫°t h∆∞·ªõng d∆∞∆°ng l√™n tr√™n, r∆∞·ªõi m·∫≠t ong."
        },
        {
            "name": "B√°nh m√¨ sandwich c√° h·ªìi x√¥ng kh√≥i",
            "ingredients": [
                {"name": "b√°nh m√¨", "amount": "2 l√°t"},
                {"name": "c√° h·ªìi x√¥ng kh√≥i", "amount": "50g"},
                {"name": "ph√¥ mai kem", "amount": "30g"},
                {"name": "d∆∞a chu·ªôt", "amount": "50g"},
                {"name": "h√†nh l√°", "amount": "10g"}
            ],
            "preparation": "Ph·∫øt ph√¥ mai kem l√™n b√°nh m√¨, x·∫øp c√° h·ªìi x√¥ng kh√≥i, d∆∞a chu·ªôt th√°i l√°t v√† h√†nh l√° th√°i nh·ªè."
        },
        {
            "name": "Tr·ª©ng khu·∫•y v·ªõi rau c·ªß",
            "ingredients": [
                {"name": "tr·ª©ng", "amount": "3 qu·∫£"},
                {"name": "·ªõt chu√¥ng", "amount": "50g"},
                {"name": "h√†nh t√¢y", "amount": "30g"},
                {"name": "c√† chua", "amount": "50g"},
                {"name": "ph√¥ mai", "amount": "30g"}
            ],
            "preparation": "X√†o h√†nh t√¢y, ·ªõt chu√¥ng v√† c√† chua. ƒê·ªï tr·ª©ng ƒë√£ khu·∫•y v√†o, th√™m ph√¥ mai v√† khu·∫•y ƒë·ªÅu."
        },
        {
            "name": "B√°nh waffle v·ªõi tr√°i c√¢y t∆∞∆°i",
            "ingredients": [
                {"name": "b·ªôt waffle", "amount": "100g"},
                {"name": "tr·ª©ng", "amount": "1 qu·∫£"},
                {"name": "s·ªØa", "amount": "150ml"},
                {"name": "d√¢u t√¢y", "amount": "50g"},
                {"name": "vi·ªát qu·∫•t", "amount": "50g"},
                {"name": "si-r√¥ c√¢y phong", "amount": "20ml"}
            ],
            "preparation": "Tr·ªôn b·ªôt waffle v·ªõi tr·ª©ng v√† s·ªØa. N∆∞·ªõng trong m√°y l√†m waffle. Ph·ª•c v·ª• v·ªõi tr√°i c√¢y t∆∞∆°i v√† si-r√¥ c√¢y phong."
        }
    ],
    "lunch": [
        {
            "name": "C∆°m t·∫•m s∆∞·ªùn n∆∞·ªõng",
            "ingredients": [
                {"name": "c∆°m t·∫•m", "amount": "200g"},
                {"name": "s∆∞·ªùn heo", "amount": "150g"},
                {"name": "tr·ª©ng ·ªëp la", "amount": "1 qu·∫£"},
                {"name": "d∆∞a chua", "amount": "50g"},
                {"name": "n∆∞·ªõc m·∫Øm pha", "amount": "30ml"}
            ],
            "preparation": "N∆∞·ªõng s∆∞·ªùn heo ∆∞·ªõp gia v·ªã. Chi√™n tr·ª©ng ·ªëp la. Ph·ª•c v·ª• v·ªõi c∆°m t·∫•m, d∆∞a chua v√† n∆∞·ªõc m·∫Øm pha.",
            "nutrition": {
                "calories": 520,
                "protein": 28.5,
                "fat": 18.2,
                "carbs": 65
            }
        },
        {
            "name": "B√∫n ch·∫£ H√† N·ªôi",
            "ingredients": [
                {"name": "b√∫n", "amount": "200g"},
                {"name": "th·ªãt heo n∆∞·ªõng", "amount": "120g"},
                {"name": "ch·∫£ c√°", "amount": "80g"},
                {"name": "rau th∆°m", "amount": "100g"},
                {"name": "n∆∞·ªõc m·∫Øm pha", "amount": "100ml"}
            ],
            "preparation": "N∆∞·ªõng th·ªãt heo v√† ch·∫£ c√°. Tr·ª•ng b√∫n, ƒÉn k√®m rau th∆°m v√† n∆∞·ªõc m·∫Øm pha chua ng·ªçt.",
            "nutrition": {
                "calories": 480,
                "protein": 32,
                "fat": 16,
                "carbs": 52
            }
        },
        {
            "name": "B√∫n tr·ªôn rau th∆°m",
            "ingredients": [
                {"name": "b√∫n", "amount": "150g"},
                {"name": "ƒë·∫≠u h≈©", "amount": "100g"},
                {"name": "gi√° ƒë·ªó", "amount": "50g"},
                {"name": "rau th∆°m h·ªón h·ª£p", "amount": "50g"},
                {"name": "n∆∞·ªõc m·∫Øm pha", "amount": "30ml"}
            ],
            "preparation": "Tr·ª•ng b√∫n, gi√° ƒë·ªó. Tr·ªôn v·ªõi ƒë·∫≠u h≈© th√°i l√°t v√† rau th∆°m. Ph·ª•c v·ª• k√®m n∆∞·ªõc m·∫Øm pha."
        },
        {
            "name": "C∆°m chi√™n rau c·ªß",
            "ingredients": [
                {"name": "g·∫°o", "amount": "150g"},
                {"name": "ƒë·∫≠u H√† Lan", "amount": "50g"},
                {"name": "b·∫Øp", "amount": "50g"},
                {"name": "c√† r·ªët", "amount": "50g"},
                {"name": "tr·ª©ng", "amount": "1 qu·∫£"}
            ],
            "preparation": "N·∫•u c∆°m tr∆∞·ªõc. X√†o tr·ª©ng v·ªõi rau c·ªß, th√™m c∆°m v√† n√™m gia v·ªã. X√†o ƒë·ªÅu tay ƒë·∫øn khi th∆°m."
        },
        {
            "name": "M√¨ tr·ªôn ki·ªÉu Nh·∫≠t",
            "ingredients": [
                {"name": "m√¨ soba", "amount": "120g"},
                {"name": "n·∫•m shiitake", "amount": "50g"},
                {"name": "c√† r·ªët", "amount": "50g"},
                {"name": "ƒë·∫≠u ph·ª•", "amount": "80g"},
                {"name": "x√¨ d·∫ßu", "amount": "15ml"},
                {"name": "d·∫ßu m√®", "amount": "5ml"}
            ],
            "preparation": "Lu·ªôc m√¨ soba. X√†o n·∫•m, c√† r·ªët v√† ƒë·∫≠u ph·ª•, n√™m v·ªõi x√¨ d·∫ßu. Tr·ªôn m√¨ v·ªõi h·ªón h·ª£p rau c·ªß v√† d·∫ßu m√®."
        },
        {
            "name": "Sandwich c√° ng·ª´",
            "ingredients": [
                {"name": "b√°nh m√¨", "amount": "2 l√°t"},
                {"name": "c√° ng·ª´ ƒë√≥ng h·ªôp", "amount": "100g"},
                {"name": "mayonnaise", "amount": "20g"},
                {"name": "h√†nh t√¢y", "amount": "30g"},
                {"name": "d∆∞a chu·ªôt", "amount": "30g"}
            ],
            "preparation": "Tr·ªôn c√° ng·ª´ v·ªõi mayonnaise, h√†nh t√¢y th√°i nh·ªè. ƒê·∫∑t h·ªón h·ª£p l√™n b√°nh m√¨ c√πng v·ªõi d∆∞a chu·ªôt th√°i l√°t."
        },
        {
            "name": "S√∫p ƒë·∫≠u lƒÉng v·ªõi rau c·ªß",
            "ingredients": [
                {"name": "ƒë·∫≠u lƒÉng", "amount": "100g"},
                {"name": "c√† r·ªët", "amount": "50g"},
                {"name": "c·∫ßn t√¢y", "amount": "30g"},
                {"name": "h√†nh t√¢y", "amount": "50g"},
                {"name": "n∆∞·ªõc d√πng rau c·ªß", "amount": "500ml"}
            ],
            "preparation": "X√†o h√†nh t√¢y, c√† r·ªët v√† c·∫ßn t√¢y. Th√™m ƒë·∫≠u lƒÉng v√† n∆∞·ªõc d√πng, n·∫•u cho ƒë·∫øn khi ƒë·∫≠u lƒÉng m·ªÅm."
        },
        {
            "name": "Salad quinoa v·ªõi rau c·ªß",
            "ingredients": [
                {"name": "quinoa", "amount": "100g"},
                {"name": "d∆∞a chu·ªôt", "amount": "50g"},
                {"name": "c√† chua", "amount": "50g"},
                {"name": "·ªõt chu√¥ng", "amount": "50g"},
                {"name": "d·∫ßu √¥ liu", "amount": "10ml"},
                {"name": "n∆∞·ªõc c·ªët chanh", "amount": "5ml"}
            ],
            "preparation": "N·∫•u quinoa, ƒë·ªÉ ngu·ªôi. Tr·ªôn v·ªõi rau c·ªß th√°i nh·ªè, d·∫ßu √¥ liu v√† n∆∞·ªõc c·ªët chanh."
        },
        {
            "name": "Ph·ªü g√†",
            "ingredients": [
                {"name": "b√°nh ph·ªü", "amount": "200g"},
                {"name": "th·ªãt g√†", "amount": "150g"},
                {"name": "h√†nh l√°", "amount": "20g"},
                {"name": "gi√° ƒë·ªó", "amount": "50g"},
                {"name": "n∆∞·ªõc d√πng g√†", "amount": "500ml"}
            ],
            "preparation": "N·∫•u n∆∞·ªõc d√πng g√† v·ªõi c√°c lo·∫°i gia v·ªã. Lu·ªôc th·ªãt g√†, x√© nh·ªè. Tr·ª•ng b√°nh ph·ªü, cho v√†o t√¥ c√πng v·ªõi th·ªãt g√†, gi√° ƒë·ªó, h√†nh l√° v√† chan n∆∞·ªõc d√πng."
        },
        {
            "name": "B√∫n ri√™u cua",
            "ingredients": [
                {"name": "b√∫n", "amount": "200g"},
                {"name": "th·ªãt cua", "amount": "100g"},
                {"name": "ƒë·∫≠u h≈©", "amount": "50g"},
                {"name": "c√† chua", "amount": "100g"},
                {"name": "rau s·ªëng", "amount": "50g"}
            ],
            "preparation": "N·∫•u n∆∞·ªõc d√πng cua v·ªõi c√† chua. Tr·ª•ng b√∫n, cho v√†o t√¥ c√πng v·ªõi th·ªãt cua, ƒë·∫≠u h≈© v√† rau s·ªëng. Chan n∆∞·ªõc d√πng l√™n tr√™n."
        }
    ],
    "dinner": [
        {
            "name": "C√° h·ªìi n∆∞·ªõng v·ªõi khoai lang v√† rau c·ªß",
            "ingredients": [
                {"name": "c√° h·ªìi", "amount": "150g"},
                {"name": "khoai lang", "amount": "100g"},
                {"name": "mƒÉng t√¢y", "amount": "80g"},
                {"name": "d·∫ßu √¥ liu", "amount": "10ml"}
            ],
            "preparation": "N∆∞·ªõng c√° h·ªìi v·ªõi d·∫ßu √¥ liu. H·∫•p khoai lang v√† mƒÉng t√¢y. Ph·ª•c v·ª• c√πng nhau."
        },
        {
            "name": "S√∫p ƒë·∫≠u lƒÉng v·ªõi rau c·ªß",
            "ingredients": [
                {"name": "ƒë·∫≠u lƒÉng", "amount": "80g"},
                {"name": "c√† r·ªët", "amount": "50g"},
                {"name": "h√†nh t√¢y", "amount": "30g"},
                {"name": "t·ªèi", "amount": "5g"},
                {"name": "n∆∞·ªõc d√πng rau c·ªß", "amount": "300ml"}
            ],
            "preparation": "Phi th∆°m t·ªèi v√† h√†nh. Th√™m c√† r·ªët, ƒë·∫≠u lƒÉng v√† n∆∞·ªõc d√πng rau c·ªß. N·∫•u cho ƒë·∫øn khi ƒë·∫≠u lƒÉng m·ªÅm."
        },
        {
            "name": "G√† kho g·ª´ng",
            "ingredients": [
                {"name": "ƒë√πi g√†", "amount": "200g"},
                {"name": "g·ª´ng", "amount": "20g"},
                {"name": "h√†nh t√¢y", "amount": "50g"},
                {"name": "n∆∞·ªõc t∆∞∆°ng", "amount": "15ml"},
                {"name": "c∆°m", "amount": "150g"}
            ],
            "preparation": "Kho g√† v·ªõi g·ª´ng, h√†nh t√¢y v√† n∆∞·ªõc t∆∞∆°ng. N·∫•u nh·ªè l·ª≠a ƒë·∫øn khi g√† m·ªÅm. Ph·ª•c v·ª• v·ªõi c∆°m."
        },
        {
            "name": "Canh b√≠ ƒë·ªè th·ªãt b√≤",
            "ingredients": [
                {"name": "b√≠ ƒë·ªè", "amount": "200g"},
                {"name": "th·ªãt b√≤", "amount": "100g"},
                {"name": "h√†nh t√¢y", "amount": "50g"},
                {"name": "n∆∞·ªõc d√πng", "amount": "400ml"}
            ],
            "preparation": "Th√°i b√≠ ƒë·ªè v√† h√†nh t√¢y. X√†o th·ªãt b√≤, th√™m rau c·ªß v√† n∆∞·ªõc d√πng. N·∫•u ƒë·∫øn khi b√≠ ƒë·ªè m·ªÅm."
        },
        {
            "name": "C√° kho c√† chua",
            "ingredients": [
                {"name": "c√° r√¥ phi", "amount": "200g"},
                {"name": "c√† chua", "amount": "100g"},
                {"name": "h√†nh t√≠m", "amount": "30g"},
                {"name": "n∆∞·ªõc m·∫Øm", "amount": "15ml"},
                {"name": "ƒë∆∞·ªùng", "amount": "10g"}
            ],
            "preparation": "Phi th∆°m h√†nh t√≠m, th√™m c√† chua x√†o m·ªÅm. ƒê·∫∑t c√° v√†o, th√™m n∆∞·ªõc m·∫Øm v√† ƒë∆∞·ªùng. Kho nh·ªè l·ª≠a ƒë·∫øn khi c√° ch√≠n m·ªÅm."
        },
        {
            "name": "Th·ªãt heo n∆∞·ªõng v·ªõi rau c·ªß",
            "ingredients": [
                {"name": "th·ªãt heo thƒÉn", "amount": "200g"},
                {"name": "khoai t√¢y", "amount": "100g"},
                {"name": "c√† r·ªët", "amount": "50g"},
                {"name": "h√†nh t√¢y", "amount": "50g"},
                {"name": "d·∫ßu √¥ liu", "amount": "15ml"}
            ],
            "preparation": "∆Ø·ªõp th·ªãt heo v·ªõi gia v·ªã, n∆∞·ªõng ch√≠n. X√†o khoai t√¢y, c√† r·ªët v√† h√†nh t√¢y v·ªõi d·∫ßu √¥ liu. Ph·ª•c v·ª• c√πng nhau."
        },
        {
            "name": "C∆°m chi√™n h·∫£i s·∫£n",
            "ingredients": [
                {"name": "g·∫°o", "amount": "150g"},
                {"name": "t√¥m", "amount": "100g"},
                {"name": "m·ª±c", "amount": "50g"},
                {"name": "ƒë·∫≠u H√† Lan", "amount": "30g"},
                {"name": "tr·ª©ng", "amount": "1 qu·∫£"}
            ],
            "preparation": "N·∫•u c∆°m tr∆∞·ªõc. X√†o h·∫£i s·∫£n v·ªõi tr·ª©ng, th√™m c∆°m v√† ƒë·∫≠u H√† Lan, n√™m gia v·ªã. X√†o ƒë·ªÅu tay ƒë·∫øn khi th∆°m."
        },
        {
            "name": "B√∫n ch·∫£",
            "ingredients": [
                {"name": "th·ªãt heo", "amount": "200g"},
                {"name": "b√∫n", "amount": "150g"},
                {"name": "rau s·ªëng", "amount": "100g"},
                {"name": "n∆∞·ªõc m·∫Øm pha", "amount": "50ml"}
            ],
            "preparation": "∆Ø·ªõp th·ªãt heo v·ªõi gia v·ªã, n∆∞·ªõng ch√≠n. Tr·ª•ng b√∫n, ph·ª•c v·ª• v·ªõi rau s·ªëng v√† n∆∞·ªõc m·∫Øm pha."
        },
        {
            "name": "ƒê·∫≠u h≈© s·ªët c√† chua",
            "ingredients": [
                {"name": "ƒë·∫≠u h≈©", "amount": "200g"},
                {"name": "c√† chua", "amount": "150g"},
                {"name": "h√†nh t√¢y", "amount": "50g"},
                {"name": "t·ªèi", "amount": "10g"},
                {"name": "c∆°m", "amount": "150g"}
            ],
            "preparation": "Chi√™n ƒë·∫≠u h≈© v√†ng. Phi th∆°m t·ªèi v√† h√†nh t√¢y, th√™m c√† chua x√†o m·ªÅm. Cho ƒë·∫≠u h≈© v√†o, n√™m gia v·ªã. Ph·ª•c v·ª• v·ªõi c∆°m."
        },
        {
            "name": "C√° thu kho d·ª©a",
            "ingredients": [
                {"name": "c√° thu", "amount": "200g"},
                {"name": "d·ª©a", "amount": "100g"},
                {"name": "h√†nh t√¢y", "amount": "50g"},
                {"name": "n∆∞·ªõc d·ª´a", "amount": "100ml"},
                {"name": "c∆°m", "amount": "150g"}
            ],
            "preparation": "Kho c√° thu v·ªõi d·ª©a, h√†nh t√¢y v√† n∆∞·ªõc d·ª´a. N·∫•u nh·ªè l·ª≠a ƒë·∫øn khi c√° ch√≠n m·ªÅm. Ph·ª•c v·ª• v·ªõi c∆°m."
        }
    ]
}

def calculate_meal_nutrition(dishes: List[Dish]) -> NutritionInfo:
    """
    Calculate the total nutrition for a meal from its dishes.
    
    Args:
        dishes: List of Dish objects
        
    Returns:
        NutritionInfo with total nutritional values
    """
    total = NutritionInfo(calories=0, protein=0, fat=0, carbs=0)
    
    for dish in dishes:
        total.calories += dish.nutrition.calories
        total.protein += dish.nutrition.protein
        total.fat += dish.nutrition.fat
        total.carbs += dish.nutrition.carbs
    
    return total

def calculate_day_nutrition(breakfast: Meal, lunch: Meal, dinner: Meal) -> NutritionInfo:
    """
    Calculate total nutrition for a day.
    
    Args:
        breakfast: Breakfast meal
        lunch: Lunch meal
        dinner: Dinner meal
        
    Returns:
        NutritionInfo object with total nutrition
    """
    # Validate input meals to avoid None values
    breakfast_nutrition = breakfast.nutrition if breakfast and breakfast.nutrition else NutritionInfo(calories=0, protein=0, fat=0, carbs=0)
    lunch_nutrition = lunch.nutrition if lunch and lunch.nutrition else NutritionInfo(calories=0, protein=0, fat=0, carbs=0)
    dinner_nutrition = dinner.nutrition if dinner and dinner.nutrition else NutritionInfo(calories=0, protein=0, fat=0, carbs=0)
    
    # Calculate totals
    total_calories = breakfast_nutrition.calories + lunch_nutrition.calories + dinner_nutrition.calories
    total_protein = breakfast_nutrition.protein + lunch_nutrition.protein + dinner_nutrition.protein
    total_fat = breakfast_nutrition.fat + lunch_nutrition.fat + dinner_nutrition.fat
    total_carbs = breakfast_nutrition.carbs + lunch_nutrition.carbs + dinner_nutrition.carbs
    
    # Log the calculation for debugging
    print(f"Day nutrition calculation:")
    print(f"  Breakfast: cal={breakfast_nutrition.calories:.1f}, p={breakfast_nutrition.protein:.1f}, f={breakfast_nutrition.fat:.1f}, c={breakfast_nutrition.carbs:.1f}")
    print(f"  Lunch: cal={lunch_nutrition.calories:.1f}, p={lunch_nutrition.protein:.1f}, f={lunch_nutrition.fat:.1f}, c={lunch_nutrition.carbs:.1f}")
    print(f"  Dinner: cal={dinner_nutrition.calories:.1f}, p={dinner_nutrition.protein:.1f}, f={dinner_nutrition.fat:.1f}, c={dinner_nutrition.carbs:.1f}")
    print(f"  TOTAL: cal={total_calories:.1f}, p={total_protein:.1f}, f={total_fat:.1f}, c={total_carbs:.1f}")
    
    return NutritionInfo(
        calories=total_calories,
        protein=total_protein,
        fat=total_fat,
        carbs=total_carbs
    )

def distribute_nutrition_targets(
    total_calories: int, 
    total_protein: int, 
    total_fat: int, 
    total_carbs: int
) -> Dict[str, Dict[str, float]]:
    """
    Distribute daily nutrition targets across meals.
    
    Args:
        total_calories: Total daily calories target
        total_protein: Total daily protein target (g)
        total_fat: Total daily fat target (g)
        total_carbs: Total daily carbs target (g)
        
    Returns:
        Dictionary with meal targets
    """
    # Ensure total_calories doesn't exceed 1500
    if total_calories > 3000:
        print(f"WARNING: Reducing calories target from {total_calories} to 3000")
        # Adjust other nutrients proportionally
        reduction_factor = 3000 / total_calories
        total_calories = 3000
        total_protein = int(total_protein * reduction_factor)
        total_fat = int(total_fat * reduction_factor)
        total_carbs = int(total_carbs * reduction_factor)
    
    # T·ª∑ l·ªá ph√¢n b·ªï cho t·ª´ng b·ªØa ƒÉn
    breakfast_ratio = 0.25  # B·ªØa s√°ng: 25% t·ªïng calo
    lunch_ratio = 0.40      # B·ªØa tr∆∞a: 40% t·ªïng calo
    dinner_ratio = 0.35     # B·ªØa t·ªëi: 35% t·ªïng calo
    
    # Calculate targets for each meal
    breakfast_calories = int(total_calories * breakfast_ratio)
    breakfast_protein = int(total_protein * breakfast_ratio)
    breakfast_fat = int(total_fat * breakfast_ratio)
    breakfast_carbs = int(total_carbs * breakfast_ratio)
    
    lunch_calories = int(total_calories * lunch_ratio)
    lunch_protein = int(total_protein * lunch_ratio)
    lunch_fat = int(total_fat * lunch_ratio)
    lunch_carbs = int(total_carbs * lunch_ratio)
    
    dinner_calories = total_calories - breakfast_calories - lunch_calories
    dinner_protein = total_protein - breakfast_protein - lunch_protein
    dinner_fat = total_fat - breakfast_fat - lunch_fat
    dinner_carbs = total_carbs - breakfast_carbs - lunch_carbs
    
    return {
        "breakfast": {
            "calories": breakfast_calories,
            "protein": breakfast_protein,
            "fat": breakfast_fat,
            "carbs": breakfast_carbs
        },
        "lunch": {
            "calories": lunch_calories,
            "protein": lunch_protein,
            "fat": lunch_fat,
            "carbs": lunch_carbs
        },
        "dinner": {
            "calories": dinner_calories,
            "protein": dinner_protein,
            "fat": dinner_fat,
            "carbs": dinner_carbs
        }
    }

def adjust_dish_portions(
    dishes: List[Dict], 
    target_calories: float,
    target_protein: float,
    target_fat: float,
    target_carbs: float
) -> List[Dict]:
    """
    Adjust portion sizes to meet nutritional targets.
    This is a simplified implementation.
    
    Args:
        dishes: List of dish dictionaries
        target_calories: Target calories for the meal
        target_protein: Target protein for the meal
        target_fat: Target fat for the meal
        target_carbs: Target carbs for the meal
        
    Returns:
        Adjusted dishes
    """
    if not dishes:
        return dishes
        
    # Calculate current totals
    current_calories = sum(dish["nutrition"]["calories"] for dish in dishes)
    current_protein = sum(dish["nutrition"]["protein"] for dish in dishes)
    current_fat = sum(dish["nutrition"]["fat"] for dish in dishes)
    current_carbs = sum(dish["nutrition"]["carbs"] for dish in dishes)
    
    # üîß FIX: Tr√°nh t·∫°o d·ªØ li·ªáu ·∫£o khi calories = 0
    if current_calories <= 0:
        print("WARNING: Current calories is zero or negative. Cannot adjust portions safely.")
        print("üîß Keeping original nutrition values instead of creating fake data.")

        # Thay v√¨ t·∫°o d·ªØ li·ªáu ·∫£o, gi·ªØ nguy√™n v√† th√¥ng b√°o
        for dish in dishes:
            if "description" in dish:
                dish["description"] += " (L∆∞u √Ω: D·ªØ li·ªáu dinh d∆∞·ª°ng c·∫ßn ƒë∆∞·ª£c x√°c minh)"

        return dishes
    
    # Calculate scaling factors (prioritize calories)
    calorie_factor = target_calories / current_calories
    
    # Log adjustment details
    print(f"Adjusting dish portions: current calories={current_calories:.1f}, target={target_calories:.1f}, factor={calorie_factor:.2f}")
    
    # üîß FIX: Gi·ªõi h·∫°n scaling factor ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh th·ª±c t·∫ø
    # Ch·ªâ cho ph√©p ƒëi·ªÅu ch·ªânh trong kho·∫£ng h·ª£p l√Ω ƒë·ªÉ kh√¥ng t·∫°o d·ªØ li·ªáu ·∫£o
    if calorie_factor > 1.5:
        print(f"WARNING: Scaling factor {calorie_factor:.2f} is too high. Limiting to 1.5 for realism")
        calorie_factor = 1.5
    elif calorie_factor < 0.7:
        print(f"WARNING: Scaling factor {calorie_factor:.2f} is too low. Limiting to 0.7 for realism")
        calorie_factor = 0.7

    # Th√¥ng b√°o v·ªÅ vi·ªác ƒëi·ªÅu ch·ªânh portion size
    if calorie_factor > 1.1:
        print(f"üìä Increasing portion sizes by {((calorie_factor - 1) * 100):.0f}%")
    elif calorie_factor < 0.9:
        print(f"üìä Decreasing portion sizes by {((1 - calorie_factor) * 100):.0f}%")
    
    # Apply scaling to all dishes
    for dish in dishes:
        for nutrient in ["calories", "protein", "fat", "carbs"]:
            dish["nutrition"][nutrient] *= calorie_factor
    
    # Verify the adjustment worked correctly
    adjusted_calories = sum(dish["nutrition"]["calories"] for dish in dishes)
    adjusted_protein = sum(dish["nutrition"]["protein"] for dish in dishes)
    adjusted_fat = sum(dish["nutrition"]["fat"] for dish in dishes)
    adjusted_carbs = sum(dish["nutrition"]["carbs"] for dish in dishes)
    
    print(f"After adjustment: calories={adjusted_calories:.1f}, protein={adjusted_protein:.1f}, fat={adjusted_fat:.1f}, carbs={adjusted_carbs:.1f}")
    
    # If still significantly off target, make a second adjustment for precision
    calories_diff_percent = abs(adjusted_calories - target_calories) / target_calories * 100
    if calories_diff_percent > 5:  # If more than 5% off target
        correction_factor = target_calories / adjusted_calories
        print(f"Making secondary adjustment with correction factor {correction_factor:.2f}")
        
        for dish in dishes:
            for nutrient in ["calories", "protein", "fat", "carbs"]:
                dish["nutrition"][nutrient] *= correction_factor
    
    return dishes

def generate_random_dishes(meal_type: str, count: int = 1, used_dishes: List[str] = None, day_index: int = -1) -> List[Dict]:
    """
    Generate random dishes for a meal type, avoiding previously used dishes if possible.
    
    Args:
        meal_type: Type of meal (breakfast, lunch, dinner)
        count: Number of dishes to generate
        used_dishes: List of dish names that have already been used
        day_index: Index of the day in the week (0-6) for adding variety
        
    Returns:
        List of dish dictionaries
    """
    # Map ti·∫øng Vi·ªát sang ti·∫øng Anh
    meal_type_map = {
        "b·ªØa s√°ng": "breakfast",
        "bu·ªïi s√°ng": "breakfast",
        "s√°ng": "breakfast",
        "breakfast": "breakfast",
        
        "b·ªØa tr∆∞a": "lunch",
        "bu·ªïi tr∆∞a": "lunch", 
        "tr∆∞a": "lunch",
        "lunch": "lunch",
        
        "b·ªØa t·ªëi": "dinner",
        "bu·ªïi t·ªëi": "dinner",
        "t·ªëi": "dinner",
        "dinner": "dinner"
    }
    
    # üîß FIX: Try Vietnamese dish generator first
    try:
        from services.meal_services import get_vietnamese_dishes
        print(f"üîß Trying Vietnamese dish generator for {meal_type} (count: {count})")

        # Chuy·ªÉn ƒë·ªïi meal_type sang d·∫°ng chu·∫©n
        normalized_meal_type = meal_type_map.get(meal_type.lower(), "breakfast")

        vietnamese_dishes = get_vietnamese_dishes(normalized_meal_type, count * 2, used_dishes)
        if vietnamese_dishes and len(vietnamese_dishes) >= count:
            selected_dishes = random.sample(vietnamese_dishes, count)
            print(f"‚úÖ Selected {len(selected_dishes)} Vietnamese dishes: {[d['name'] for d in selected_dishes]}")
            return selected_dishes
        else:
            print(f"‚ö†Ô∏è Vietnamese generator returned insufficient dishes ({len(vietnamese_dishes) if vietnamese_dishes else 0})")
    except Exception as e:
        print(f"‚ùå Error using Vietnamese dish generator: {e}")

    # Fallback to original SAMPLE_RECIPES logic
    print(f"‚ö†Ô∏è Falling back to SAMPLE_RECIPES for {meal_type}")

    # Log cho debugging
    print(f"Generating random dishes for meal type: '{meal_type}', day index: {day_index}")
    if used_dishes:
        print(f"Avoiding previously used dishes: {used_dishes}")

    # Chuy·ªÉn ƒë·ªïi meal_type sang d·∫°ng chu·∫©n
    normalized_meal_type = meal_type_map.get(meal_type.lower(), "breakfast")
    print(f"Normalized to: '{normalized_meal_type}'")
    
    # L·∫•y m√≥n ƒÉn t·ª´ SAMPLE_RECIPES
    available_dishes = SAMPLE_RECIPES.get(normalized_meal_type, [])
    print(f"Available dishes: {len(available_dishes)}")
    
    if len(available_dishes) == 0:
        print("WARNING: No dishes available for this meal type!")
        # Fallback to breakfast if empty
        available_dishes = SAMPLE_RECIPES.get("breakfast", [])
    
    # T·∫°o b·∫£n sao c·ªßa c√°c m√≥n ƒÉn ƒë·ªÉ tr√°nh thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
    available_dishes = [dish.copy() for dish in available_dishes]
    
    # Filter out previously used dishes if possible
    unused_dishes = available_dishes
    if used_dishes:
        unused_dishes = [dish for dish in available_dishes if dish["name"] not in used_dishes]
        print(f"Unused dishes after filtering: {len(unused_dishes)}")
        
        # If we've used all dishes already or can't avoid repeats due to small selection
        if len(unused_dishes) < count:
            print("WARNING: Not enough unique dishes available, some dishes may repeat")
            # Use all available dishes but prioritize unused ones
            unused_dishes = available_dishes
            
            # N·∫øu bu·ªôc ph·∫£i d√πng l·∫°i m√≥n ƒë√£ d√πng, th√™m bi·∫øn th·ªÉ v√†o t√™n
            for dish in unused_dishes:
                if dish["name"] in used_dishes:
                    variation = f" (Bi·∫øn th·ªÉ {random.randint(1, 100)})"
                    dish["name"] = dish["name"] + variation
    
    # S·ª≠ d·ª•ng day_index ƒë·ªÉ t·∫°o s·ª± ƒëa d·∫°ng
    if day_index >= 0 and day_index < 7:
        # S·ª≠ d·ª•ng day_index ƒë·ªÉ x√°o tr·ªôn danh s√°ch m√≥n ƒÉn theo m·ªôt c√°ch nh·∫•t qu√°n cho m·ªói ng√†y
        # nh∆∞ng kh√°c nhau gi·ªØa c√°c ng√†y
        random.seed(day_index * 100 + len(meal_type) + hash(normalized_meal_type) % 1000)
        random.shuffle(unused_dishes)
        
        # Th√™m bi·∫øn th·ªÉ v√†o t√™n m√≥n ƒÉn d·ª±a tr√™n ng√†y ƒë·ªÉ tr√°nh tr√πng l·∫∑p
        day_name = DAYS_OF_WEEK[day_index] if day_index < len(DAYS_OF_WEEK) else f"Ng√†y {day_index+1}"
        for dish in unused_dishes:
            if not day_name in dish["name"]:
                dish["name"] = f"{dish['name']} ({day_name})"
        
        # ƒê·∫∑t l·∫°i random seed sau khi s·ª≠ d·ª•ng
        random.seed()
    
    # L·∫•y ng·∫´u nhi√™n m√≥n ƒÉn
    if len(unused_dishes) <= count:
        # If we don't have enough, use all available and possibly add some from other meal types
        selected_dishes = unused_dishes.copy()
        remaining = count - len(selected_dishes)
        
        if remaining > 0:
            # Get dishes from other meal types to avoid repeats
            other_types = [t for t in SAMPLE_RECIPES.keys() if t != normalized_meal_type]
            other_dishes = []
            for other_type in other_types:
                other_dishes.extend([dish.copy() for dish in SAMPLE_RECIPES[other_type]])
            
            # Avoid used dishes in other types too
            if used_dishes:
                other_dishes = [dish for dish in other_dishes if dish["name"] not in used_dishes]
            
            # Th√™m bi·∫øn th·ªÉ v√†o t√™n m√≥n ƒÉn t·ª´ lo·∫°i b·ªØa kh√°c
            for dish in other_dishes:
                dish["name"] = f"{dish['name']} (T·ª´ {normalized_meal_type})"
            
            # Add random dishes from other types
            if other_dishes:
                # S·ª≠ d·ª•ng day_index ƒë·ªÉ x√°o tr·ªôn danh s√°ch
                if day_index >= 0:
                    random.seed(day_index * 200 + hash(normalized_meal_type) % 1000)
                    random.shuffle(other_dishes)
                    random.seed()
                
                additional_dishes = other_dishes[:min(remaining, len(other_dishes))]
                selected_dishes.extend(additional_dishes)
    else:
        # Randomly sample if we have enough
        selected_dishes = random.sample(unused_dishes, count)
    
    # Th√™m th√¥ng tin dinh d∆∞·ª°ng n·∫øu c·∫ßn
    for dish in selected_dishes:
        if "nutrition" not in dish:
            # Th√™m bi·∫øn ƒë·ªông nh·ªè v√†o gi√° tr·ªã dinh d∆∞·ª°ng d·ª±a tr√™n day_index
            variation = 1.0
            if day_index >= 0:
                variation = 0.9 + (day_index * 0.05)  # Bi·∫øn ƒë·ªông t·ª´ 0.9 ƒë·∫øn 1.2
            
            dish["nutrition"] = {
                "calories": int(300 * variation),  # Gi·∫£m xu·ªëng t·ª´ 400
                "protein": int(15 * variation),    # Gi·∫£m xu·ªëng t·ª´ 20
                "fat": int(10 * variation),        # Gi·∫£m xu·ªëng t·ª´ 15
                "carbs": int(35 * variation)       # Gi·∫£m xu·ªëng t·ª´ 45
            }
        
        # Th√™m ng√†y v√†o t√™n m√≥n ƒÉn ƒë·ªÉ t·∫°o s·ª± ƒëa d·∫°ng n·∫øu c·∫ßn v√† ch∆∞a c√≥
        if day_index >= 0:
            day_name = DAYS_OF_WEEK[day_index] if day_index < len(DAYS_OF_WEEK) else f"Ng√†y {day_index+1}"
            if "name" in dish and not day_name in dish["name"]:
                dish["name"] = f"{dish['name']} ({day_name})"
    
    # Log k·∫øt qu·∫£
    dish_names = [dish["name"] for dish in selected_dishes]
    print(f"Selected dishes: {dish_names}")
            
    return selected_dishes

def validate_nutrition_data(nutrition_dict: Dict) -> bool:
    """
    Ki·ªÉm tra t√≠nh h·ª£p l√Ω c·ªßa d·ªØ li·ªáu dinh d∆∞·ª°ng ƒë·ªÉ tr√°nh d·ªØ li·ªáu ·∫£o

    Args:
        nutrition_dict: Dictionary ch·ª©a th√¥ng tin dinh d∆∞·ª°ng

    Returns:
        bool: True n·∫øu d·ªØ li·ªáu h·ª£p l√Ω, False n·∫øu c√≥ v·∫•n ƒë·ªÅ
    """
    try:
        calories = float(nutrition_dict.get('calories', 0))
        protein = float(nutrition_dict.get('protein', 0))
        fat = float(nutrition_dict.get('fat', 0))
        carbs = float(nutrition_dict.get('carbs', 0))

        # Ki·ªÉm tra gi√° tr·ªã √¢m
        if any(val < 0 for val in [calories, protein, fat, carbs]):
            print("‚ùå Nutrition validation failed: Negative values detected")
            return False

        # Ki·ªÉm tra calories qu√° th·∫•p (c√≥ th·ªÉ l√† l·ªói t√≠nh to√°n)
        if calories < 10:
            print(f"‚ùå Nutrition validation failed: Calories too low ({calories})")
            return False

        # Ki·ªÉm tra t·ª∑ l·ªá macro h·ª£p l√Ω
        calculated_calories = (protein * 4) + (fat * 9) + (carbs * 4)
        if calories > 0 and abs(calculated_calories - calories) > calories * 0.5:
            print(f"‚ö†Ô∏è Nutrition warning: Macro mismatch. Calculated: {calculated_calories:.1f}, Stated: {calories:.1f}")
            # Kh√¥ng return False v√¨ c√≥ th·ªÉ c√≥ fiber v√† c√°c th√†nh ph·∫ßn kh√°c

        # Ki·ªÉm tra gi√° tr·ªã qu√° cao (c√≥ th·ªÉ l√† l·ªói)
        if calories > 2000:  # M·ªôt m√≥n ƒÉn th∆∞·ªùng kh√¥ng qu√° 2000 calories
            print(f"‚ö†Ô∏è Nutrition warning: Very high calories ({calories}) for a single dish")

        return True

    except (TypeError, ValueError) as e:
        print(f"‚ùå Nutrition validation failed: Invalid data format - {e}")
        return False

def format_nutrition_value(value, precision=1):
    """
    L√†m tr√≤n gi√° tr·ªã dinh d∆∞·ª°ng v·ªõi ƒë·ªô ch√≠nh x√°c ph√π h·ª£p v√† validation.

    Args:
        value: Gi√° tr·ªã c·∫ßn l√†m tr√≤n
        precision: S·ªë ch·ªØ s·ªë sau d·∫•u ph·∫©y (m·∫∑c ƒë·ªãnh: 1)

    Returns:
        Gi√° tr·ªã ƒë√£ l√†m tr√≤n ph√π h·ª£p
    """
    if value is None:
        return 0

    # Chuy·ªÉn v·ªÅ float ƒë·ªÉ ƒë·∫£m b·∫£o
    try:
        value = float(value)
    except (TypeError, ValueError):
        return 0

    # üîß FIX: Ki·ªÉm tra gi√° tr·ªã h·ª£p l√Ω
    if value < 0:
        print(f"‚ö†Ô∏è Warning: Negative nutrition value ({value}) detected, setting to 0")
        return 0

    # L√†m tr√≤n theo logic:
    # - Gi√° tr·ªã < 1: gi·ªØ 2 s·ªë th·∫≠p ph√¢n
    # - Gi√° tr·ªã 1-10: gi·ªØ 1 s·ªë th·∫≠p ph√¢n
    # - Gi√° tr·ªã > 10: l√†m tr√≤n th√†nh s·ªë nguy√™n
    if value < 1:
        return round(value, 2)
    elif value < 10:
        return round(value, 1)
    else:
        return int(round(value))
