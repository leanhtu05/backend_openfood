"""
YouTube Video Search Service
T·ª± ƒë·ªông t√¨m ki·∫øm video h∆∞·ªõng d·∫´n n·∫•u ƒÉn tr√™n YouTube cho c√°c m√≥n ƒÉn
"""

import requests
import os
import logging
from typing import Optional, Dict, Any
from urllib.parse import quote_plus
import time
from services.video_cache_service import video_cache_service

logger = logging.getLogger(__name__)

class YouTubeService:
    """Service ƒë·ªÉ t·ª± ƒë·ªông t√¨m ki·∫øm video YouTube cho m√≥n ƒÉn"""
    
    def __init__(self):
        self.api_key = os.environ.get("YOUTUBE_API_KEY")
        self.base_url = "https://www.googleapis.com/youtube/v3/search"
        self.available = bool(self.api_key)

        # Fallback video URLs cho c√°c m√≥n ƒÉn ph·ªï bi·∫øn (URLs th·∫≠t v·ªÅ n·∫•u ƒÉn)
        self.fallback_videos = {
            # M√≥n ch√≠nh
            'ph·ªü': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'c∆°m': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'b√°nh m√¨': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'b√∫n': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'canh': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'x√¥i': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'ch·∫£': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'm√¨': 'https://www.youtube.com/watch?v=np1HMXdPqcM',

            # Protein
            'g√†': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'th·ªãt': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'c√°': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            't√¥m': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            's∆∞·ªùn': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'tr·ª©ng': 'https://www.youtube.com/watch?v=np1HMXdPqcM',

            # Rau c·ªß v√† chay
            'rau': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'ƒë·∫≠u': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'chay': 'https://www.youtube.com/watch?v=np1HMXdPqcM',

            # B√°nh k·∫πo v√† m√≥n tr√°ng mi·ªáng
            'b√°nh': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'waffle': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'pancake': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'sandwich': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'salad': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'smoothie': 'https://www.youtube.com/watch?v=np1HMXdPqcM',

            # T·ª´ kh√≥a chung
            'n∆∞·ªõng': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'x√†o': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'lu·ªôc': 'https://www.youtube.com/watch?v=np1HMXdPqcM',
            'chi√™n': 'https://www.youtube.com/watch?v=np1HMXdPqcM'
        }

        if not self.available:
            logger.warning("YouTube API Key kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh. S·ª≠ d·ª•ng fallback video URLs.")
        else:
            logger.info("YouTube Service ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.")
    
    def _normalize_dish_name(self, dish_name: str) -> str:
        """
        Chu·∫©n h√≥a t√™n m√≥n ƒÉn ƒë·ªÉ t√¨m ki·∫øm t·ªët h∆°n

        Args:
            dish_name: T√™n m√≥n ƒÉn g·ªëc

        Returns:
            T√™n m√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a
        """
        # Lo·∫°i b·ªè c√°c t·ª´ kh√¥ng c·∫ßn thi·∫øt
        unnecessary_words = [
            'v·ªõi', 'v√†', 'k√®m', 'theo', 'ki·ªÉu', 'phong c√°ch', 'ƒë·∫∑c bi·ªát',
            'truy·ªÅn th·ªëng', 'gia ƒë√¨nh', 'nh√† l√†m', 't·ª± l√†m'
        ]

        normalized = dish_name.lower()
        for word in unnecessary_words:
            normalized = normalized.replace(word, ' ')

        # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        normalized = ' '.join(normalized.split())

        return normalized

    def _get_fallback_video(self, dish_name: str) -> Optional[str]:
        """
        T√¨m fallback video URL d·ª±a tr√™n t√™n m√≥n ƒÉn

        Args:
            dish_name: T√™n m√≥n ƒÉn

        Returns:
            URL fallback video ho·∫∑c None
        """
        dish_lower = dish_name.lower()

        # T√¨m ki·∫øm t·ª´ kh√≥a trong t√™n m√≥n ƒÉn
        for keyword, video_url in self.fallback_videos.items():
            if keyword in dish_lower:
                logger.info(f"üéØ T√¨m th·∫•y fallback video cho '{dish_name}' v·ªõi keyword '{keyword}'")
                return video_url

        # N·∫øu kh√¥ng t√¨m th·∫•y keyword c·ª• th·ªÉ, tr·∫£ v·ªÅ video m·∫∑c ƒë·ªãnh
        default_video = 'https://www.youtube.com/watch?v=np1HMXdPqcM'
        logger.info(f"üì∫ S·ª≠ d·ª•ng default video cho '{dish_name}'")
        return default_video

    def get_youtube_video_url(self, dish_name: str, max_retries: int = 3) -> Optional[str]:
        """
        T√¨m ki·∫øm video YouTube cho m√≥n ƒÉn v·ªõi cache optimization

        Args:
            dish_name: T√™n m√≥n ƒÉn c·∫ßn t√¨m video
            max_retries: S·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa

        Returns:
            URL c·ªßa video YouTube ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
        """
        logger.info(f"üîç T√¨m ki·∫øm video cho m√≥n '{dish_name}'")

        # B∆Ø·ªöC 1: Ki·ªÉm tra cache tr∆∞·ªõc
        cached_video = video_cache_service.get_cached_video(dish_name)
        if cached_video:
            logger.info(f"‚úÖ S·ª≠ d·ª•ng cached video cho '{dish_name}': {cached_video}")
            return cached_video

        # B∆Ø·ªöC 2: Th·ª≠ t√¨m fallback video
        fallback_url = self._get_fallback_video(dish_name)
        if fallback_url:
            logger.info(f"üìã S·ª≠ d·ª•ng fallback video cho '{dish_name}': {fallback_url}")
            # Cache fallback video ƒë·ªÉ l·∫ßn sau kh√¥ng ph·∫£i t√¨m l·∫°i
            video_cache_service.cache_video(dish_name, fallback_url, "fallback")
            return fallback_url

        # B∆Ø·ªöC 3: N·∫øu kh√¥ng c√≥ cache v√† fallback, th·ª≠ YouTube API
        if not self.available:
            logger.warning("YouTube API kh√¥ng kh·∫£ d·ª•ng v√† kh√¥ng c√≥ fallback video")
            return None

        # Chu·∫©n h√≥a t√™n m√≥n ƒÉn cho t√¨m ki·∫øm
        normalized_name = self._normalize_dish_name(dish_name)
        logger.info(f"üîç T√¨m ki·∫øm tr√™n YouTube API cho '{dish_name}' (chu·∫©n h√≥a: '{normalized_name}')")

        # T·∫°o query t√¨m ki·∫øm v·ªõi nhi·ªÅu bi·∫øn th·ªÉ h∆°n
        search_queries = [
            f"c√°ch l√†m {normalized_name}",
            f"h∆∞·ªõng d·∫´n n·∫•u {normalized_name}",
            f"c√¥ng th·ª©c {normalized_name}",
            f"n·∫•u {normalized_name}",
            f"l√†m {normalized_name}",
            f"recipe {normalized_name}",
            f"{normalized_name} recipe",
            f"{normalized_name} cooking tutorial",
            f"how to make {normalized_name}",
            f"{normalized_name} cooking",
            # Th√™m query v·ªõi t√™n g·ªëc n·∫øu kh√°c v·ªõi t√™n chu·∫©n h√≥a
            f"c√°ch l√†m {dish_name}" if normalized_name != dish_name.lower() else None,
            f"recipe {dish_name}" if normalized_name != dish_name.lower() else None
        ]

        # Lo·∫°i b·ªè c√°c query None
        search_queries = [q for q in search_queries if q is not None]
        
        for query in search_queries:
            try:
                video_url = self._search_video(query)
                if video_url:
                    logger.info(f"‚úÖ T√¨m th·∫•y video cho '{dish_name}': {video_url}")

                    # B∆Ø·ªöC 4: Cache k·∫øt qu·∫£ t√¨m ki·∫øm
                    video_cache_service.cache_video(dish_name, video_url, "youtube_api")
                    return video_url
                    
                # Delay gi·ªØa c√°c query ƒë·ªÉ tr√°nh rate limit
                time.sleep(0.5)
                
            except Exception as e:
                logger.error(f"L·ªói khi t√¨m ki·∫øm video v·ªõi query '{query}': {str(e)}")
                continue
        
        logger.warning(f"Kh√¥ng t√¨m th·∫•y video ph√π h·ª£p cho m√≥n '{dish_name}'")
        return None
    
    def _search_video(self, query: str) -> Optional[str]:
        """
        Th·ª±c hi·ªán t√¨m ki·∫øm video v·ªõi query c·ª• th·ªÉ
        
        Args:
            query: T·ª´ kh√≥a t√¨m ki·∫øm
            
        Returns:
            URL c·ªßa video ho·∫∑c None
        """
        try:
            # Encode query ƒë·ªÉ ƒë·∫£m b·∫£o URL h·ª£p l·ªá
            encoded_query = quote_plus(query)
            
            # Tham s·ªë cho API request
            params = {
                'part': 'snippet',
                'q': encoded_query,
                'key': self.api_key,
                'maxResults': 5,  # L·∫•y 5 k·∫øt qu·∫£ ƒë·ªÉ c√≥ nhi·ªÅu l·ª±a ch·ªçn
                'type': 'video',
                'order': 'relevance',  # S·∫Øp x·∫øp theo ƒë·ªô li√™n quan
                'regionCode': 'VN',  # ∆Øu ti√™n k·∫øt qu·∫£ t·ª´ Vi·ªát Nam
                'relevanceLanguage': 'vi'  # ∆Øu ti√™n ng√¥n ng·ªØ ti·∫øng Vi·ªát
            }
            
            # G·ª≠i request ƒë·∫øn YouTube API
            response = requests.get(self.base_url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            # Ki·ªÉm tra c√≥ k·∫øt qu·∫£ kh√¥ng
            if 'items' not in data or not data['items']:
                return None
            
            # T√¨m video ph√π h·ª£p nh·∫•t
            for item in data['items']:
                video_id = item['id']['videoId']
                title = item['snippet']['title'].lower()
                description = item['snippet']['description'].lower()
                
                # Ki·ªÉm tra video c√≥ li√™n quan ƒë·∫øn n·∫•u ƒÉn kh√¥ng
                cooking_keywords = [
                    'c√°ch l√†m', 'h∆∞·ªõng d·∫´n', 'c√¥ng th·ª©c', 'n·∫•u', 'l√†m', 'ch·∫ø bi·∫øn',
                    'recipe', 'cooking', 'tutorial', 'how to make', 'food', 'kitchen',
                    'chef', 'm√≥n', 'ƒÉn', 'th·ª©c ƒÉn', 'b·∫øp'
                ]

                # N·∫øu t√¨m th·∫•y t·ª´ kh√≥a n·∫•u ƒÉn, ∆∞u ti√™n video n√†y
                if any(keyword in title or keyword in description for keyword in cooking_keywords):
                    video_url = f"https://www.youtube.com/watch?v={video_id}"
                    logger.info(f"‚úÖ T√¨m th·∫•y cooking video: {title}")
                    return video_url

            # N·∫øu kh√¥ng c√≥ video n√†o ph√π h·ª£p, tr·∫£ v·ªÅ video ƒë·∫ßu ti√™n
            if data['items']:
                video_id = data['items'][0]['id']['videoId']
                title = data['items'][0]['snippet']['title']
                video_url = f"https://www.youtube.com/watch?v={video_id}"
                logger.info(f"üì∫ S·ª≠ d·ª•ng video ƒë·∫ßu ti√™n: {title}")
                return video_url

            return None
            
        except requests.exceptions.RequestException as e:
            logger.error(f"L·ªói network khi g·ªçi YouTube API: {str(e)}")
            return None
        except KeyError as e:
            logger.error(f"L·ªói parse response t·ª´ YouTube API: {str(e)}")
            return None
        except Exception as e:
            logger.error(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi t√¨m ki·∫øm video: {str(e)}")
            return None
    
    def get_video_info(self, video_url: str) -> Optional[Dict[str, Any]]:
        """
        L·∫•y th√¥ng tin chi ti·∫øt c·ªßa video t·ª´ URL
        
        Args:
            video_url: URL c·ªßa video YouTube
            
        Returns:
            Dictionary ch·ª©a th√¥ng tin video ho·∫∑c None
        """
        if not self.available:
            return None
            
        try:
            # Extract video ID t·ª´ URL
            if 'watch?v=' in video_url:
                video_id = video_url.split('watch?v=')[1].split('&')[0]
            else:
                return None
            
            # G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin video
            params = {
                'part': 'snippet,statistics',
                'id': video_id,
                'key': self.api_key
            }
            
            response = requests.get(
                "https://www.googleapis.com/youtube/v3/videos",
                params=params,
                timeout=10
            )
            response.raise_for_status()
            
            data = response.json()
            
            if 'items' not in data or not data['items']:
                return None
            
            item = data['items'][0]
            snippet = item['snippet']
            statistics = item.get('statistics', {})
            
            return {
                'title': snippet['title'],
                'description': snippet['description'],
                'channel_title': snippet['channelTitle'],
                'published_at': snippet['publishedAt'],
                'view_count': statistics.get('viewCount', '0'),
                'like_count': statistics.get('likeCount', '0'),
                'duration': item.get('contentDetails', {}).get('duration', 'Unknown')
            }
            
        except Exception as e:
            logger.error(f"L·ªói khi l·∫•y th√¥ng tin video: {str(e)}")
            return None

# T·∫°o instance global
youtube_service = YouTubeService()
